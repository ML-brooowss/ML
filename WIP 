{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/linneverh/ML/blob/main/WIP%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "OHM0r5z2CeJU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c463b934-efe6-4488-e2c3-da4a8e434bf1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.11/dist-packages (4.1.0)\n",
            "Requirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.51.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.67.1)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (2.6.0+cpu)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (1.6.1)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (1.15.2)\n",
            "Requirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (0.31.1)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (11.2.1)\n",
            "Requirement already satisfied: typing_extensions>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.13.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (3.18.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (2025.3.2)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (25.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (6.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (2.32.3)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (1.1.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.6)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.11.0->sentence-transformers) (1.3.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (2.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (2024.11.6)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (0.21.1)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (0.5.3)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence-transformers) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence-transformers) (3.6.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (3.0.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers) (2025.4.26)\n"
          ]
        }
      ],
      "source": [
        "#Library\n",
        "!pip install sentence-transformers\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import random\n",
        "from sklearn.preprocessing import normalize\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sentence_transformers import SentenceTransformer"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "U26TtWpHCeJW"
      },
      "source": [
        "# Recommender Systems"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "IMEUUjU8CeJY"
      },
      "source": [
        "## Task 1: Exploring\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the datasets\n",
        "interactions = pd.read_csv('https://raw.githubusercontent.com/linneverh/MachineLearning/main/interactions_train.csv')\n",
        "items1 = pd.read_csv(\"https://raw.githubusercontent.com/linneverh/ML/refs/heads/main/embeddings_part1.csv\")\n",
        "items2 = pd.read_csv(\"https://raw.githubusercontent.com/linneverh/ML/refs/heads/main/embeddings_part2.csv\")\n",
        "items = pd.concat([items1, items2])\n",
        "\n",
        "#rename columns\n",
        "interactions = interactions.rename(columns={'u': 'user_id', 'i': 'book_id', 't': 'timestamp'})\n",
        "items=items.rename(columns={'i':'book_id'})\n",
        "# Display the first rows of the updated interactions DataFrame\n",
        "display(interactions.head())\n",
        "display(items.head())\n",
        "\n",
        "# Display the first rows of each dataset\n",
        "display(interactions.head())\n",
        "display(items.head())"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YodjQAEPmdcn",
        "outputId": "bf0c5fad-e877-4c63-e1f4-462f64cd000d"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   user_id  book_id     timestamp\n",
              "0     4456     8581  1.687541e+09\n",
              "1      142     1964  1.679585e+09\n",
              "2      362     3705  1.706872e+09\n",
              "3     1809    11317  1.673533e+09\n",
              "4     4384     1323  1.681402e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bb10cd1d-b5a2-4855-8da7-b162a9f90f8f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4456</td>\n",
              "      <td>8581</td>\n",
              "      <td>1.687541e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>142</td>\n",
              "      <td>1964</td>\n",
              "      <td>1.679585e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>362</td>\n",
              "      <td>3705</td>\n",
              "      <td>1.706872e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1809</td>\n",
              "      <td>11317</td>\n",
              "      <td>1.673533e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4384</td>\n",
              "      <td>1323</td>\n",
              "      <td>1.681402e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb10cd1d-b5a2-4855-8da7-b162a9f90f8f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bb10cd1d-b5a2-4855-8da7-b162a9f90f8f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bb10cd1d-b5a2-4855-8da7-b162a9f90f8f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-da9c81df-7c93-4204-9a0f-bd41f7d86c6b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da9c81df-7c93-4204-9a0f-bd41f7d86c6b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-da9c81df-7c93-4204-9a0f-bd41f7d86c6b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2098,\n        \"min\": 142,\n        \"max\": 4456,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          142,\n          4384,\n          362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4371,\n        \"min\": 1323,\n        \"max\": 11317,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1964,\n          1323,\n          3705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12801198.97249742,\n        \"min\": 1673533162.0,\n        \"max\": 1706871659.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1679585406.0,\n          1681402162.0,\n          1706871659.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                               Title  \\\n",
              "0  Classification décimale universelle : édition ...   \n",
              "1  Les interactions dans l'enseignement des langu...   \n",
              "2  Histoire de vie et recherche biographique : pe...   \n",
              "3  Ce livre devrait me permettre de résoudre le c...   \n",
              "4                    Les années glorieuses : roman /   \n",
              "\n",
              "                     Author  \\\n",
              "0                       NaN   \n",
              "1  Cicurel, Francine, 1947-   \n",
              "2                       NaN   \n",
              "3     Mazas, Sylvain, 1980-   \n",
              "4   Lemaitre, Pierre, 1951-   \n",
              "\n",
              "                                          ISBN Valid     Publisher  \\\n",
              "0                          9782871303336; 2871303339   Ed du CEFAL   \n",
              "1                          9782278058327; 2278058320        Didier   \n",
              "2                          2343190194; 9782343190198   L'Harmattan   \n",
              "3  9782365350020; 236535002X; 9782365350488; 2365...       Vraoum!   \n",
              "4  9782702180815; 2702180817; 9782702183618; 2702...  Calmann-Lévy   \n",
              "\n",
              "                                            Subjects  book_id           ISBN  \\\n",
              "0  Classification décimale universelle; Indexatio...        0  9782871303336   \n",
              "1  didactique--langue étrangère - enseignement; d...        1  9782278058327   \n",
              "2  Histoires de vie en sociologie; Sciences socia...        2     2343190194   \n",
              "3  Moyen-Orient; Bandes dessinées autobiographiqu...        3  9782365350020   \n",
              "4  France--1945-1975; Roman historique; Roman fra...        4  9782702180815   \n",
              "\n",
              "                                    google_api_title      author_clean  \\\n",
              "0                Classification décimale universelle               NaN   \n",
              "1   Les interactions dans l'enseignement des langues  Cicurel Francine   \n",
              "2          Histoire de vie et recherche biographique               NaN   \n",
              "3  Ce livre devrait me permettre de résoudre le c...     Mazas Sylvain   \n",
              "4                              Les années glorieuses   Lemaitre Pierre   \n",
              "\n",
              "                                      embedded_title  \n",
              "0  [-0.010769891, -0.087789156, -0.048586313, 0.0...  \n",
              "1  [0.027142433, -0.020540524, -0.0023190805, 0.0...  \n",
              "2  [0.05334512, -0.03868564, -0.003815435, -0.027...  \n",
              "3  [0.02292607, -0.039551307, -0.024395213, -0.00...  \n",
              "4  [0.027675966, -0.01612932, -0.01800864, 0.0196...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-147a0c30-8958-4423-8b3f-ad3851d4dae3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Author</th>\n",
              "      <th>ISBN Valid</th>\n",
              "      <th>Publisher</th>\n",
              "      <th>Subjects</th>\n",
              "      <th>book_id</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>google_api_title</th>\n",
              "      <th>author_clean</th>\n",
              "      <th>embedded_title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Classification décimale universelle : édition ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9782871303336; 2871303339</td>\n",
              "      <td>Ed du CEFAL</td>\n",
              "      <td>Classification décimale universelle; Indexatio...</td>\n",
              "      <td>0</td>\n",
              "      <td>9782871303336</td>\n",
              "      <td>Classification décimale universelle</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[-0.010769891, -0.087789156, -0.048586313, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Les interactions dans l'enseignement des langu...</td>\n",
              "      <td>Cicurel, Francine, 1947-</td>\n",
              "      <td>9782278058327; 2278058320</td>\n",
              "      <td>Didier</td>\n",
              "      <td>didactique--langue étrangère - enseignement; d...</td>\n",
              "      <td>1</td>\n",
              "      <td>9782278058327</td>\n",
              "      <td>Les interactions dans l'enseignement des langues</td>\n",
              "      <td>Cicurel Francine</td>\n",
              "      <td>[0.027142433, -0.020540524, -0.0023190805, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Histoire de vie et recherche biographique : pe...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2343190194; 9782343190198</td>\n",
              "      <td>L'Harmattan</td>\n",
              "      <td>Histoires de vie en sociologie; Sciences socia...</td>\n",
              "      <td>2</td>\n",
              "      <td>2343190194</td>\n",
              "      <td>Histoire de vie et recherche biographique</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[0.05334512, -0.03868564, -0.003815435, -0.027...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas, Sylvain, 1980-</td>\n",
              "      <td>9782365350020; 236535002X; 9782365350488; 2365...</td>\n",
              "      <td>Vraoum!</td>\n",
              "      <td>Moyen-Orient; Bandes dessinées autobiographiqu...</td>\n",
              "      <td>3</td>\n",
              "      <td>9782365350020</td>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas Sylvain</td>\n",
              "      <td>[0.02292607, -0.039551307, -0.024395213, -0.00...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Les années glorieuses : roman /</td>\n",
              "      <td>Lemaitre, Pierre, 1951-</td>\n",
              "      <td>9782702180815; 2702180817; 9782702183618; 2702...</td>\n",
              "      <td>Calmann-Lévy</td>\n",
              "      <td>France--1945-1975; Roman historique; Roman fra...</td>\n",
              "      <td>4</td>\n",
              "      <td>9782702180815</td>\n",
              "      <td>Les années glorieuses</td>\n",
              "      <td>Lemaitre Pierre</td>\n",
              "      <td>[0.027675966, -0.01612932, -0.01800864, 0.0196...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-147a0c30-8958-4423-8b3f-ad3851d4dae3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-147a0c30-8958-4423-8b3f-ad3851d4dae3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-147a0c30-8958-4423-8b3f-ad3851d4dae3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-df7a661c-e9cc-4266-a2e4-eb55bff37723\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df7a661c-e9cc-4266-a2e4-eb55bff37723')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-df7a661c-e9cc-4266-a2e4-eb55bff37723 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues : agir professoral et pratiques de classe /\",\n          \"Les ann\\u00e9es glorieuses : roman /\",\n          \"Histoire de vie et recherche biographique : perspectives sociohistoriques /\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel, Francine, 1947-\",\n          \"Mazas, Sylvain, 1980-\",\n          \"Lemaitre, Pierre, 1951-\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN Valid\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327; 2278058320\",\n          \"9782702180815; 2702180817; 9782702183618; 2702183611\",\n          \"2343190194; 9782343190198\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Publisher\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Didier\",\n          \"Calmann-L\\u00e9vy\",\n          \"L'Harmattan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subjects\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"didactique--langue \\u00e9trang\\u00e8re - enseignement; didactique--langue - enseignement\",\n          \"France--1945-1975; Roman historique; Roman fran\\u00e7ais; Litt\\u00e9rature fran\\u00e7aise\",\n          \"Histoires de vie en sociologie; Sciences sociales--M\\u00e9thodologie; Actes de congr\\u00e8s\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327\",\n          \"9782702180815\",\n          \"2343190194\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"google_api_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues\",\n          \"Les ann\\u00e9es glorieuses\",\n          \"Histoire de vie et recherche biographique\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"author_clean\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel Francine\",\n          \"Mazas Sylvain\",\n          \"Lemaitre Pierre\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embedded_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"[0.027142433, -0.020540524, -0.0023190805, 0.023604088, 0.00027529796, 0.017977564, 0.03452997, -0.0474766, 0.015225577, 0.052039135, -0.00036042446, -0.02997406, -0.040366422, -0.04519187, 0.054508, -0.015482123, 0.044681873, -0.022422874, 0.012578571, 0.013673336, -0.011722488, 0.037818618, 0.00047222737, -0.008002775, 0.0016725715, 0.0016066253, 0.018150209, -0.039469957, -0.036887415, 0.016883975, -0.026982145, -0.00012661815, -0.0479128, -0.013174155, -0.026351985, -0.010624157, -0.009502069, 0.025267933, 0.0059955204, -0.01497183, -0.018615108, -0.018552283, -0.021930577, -0.05262457, 0.014632506, -0.037593767, 0.04726378, 0.048031423, -0.02075533, -0.061559338, 0.046888605, 0.024475658, 0.053917464, -0.042040538, 0.025207626, -0.034834586, 0.051548373, 0.038185775, -0.04597259, -0.03408335, -0.017298982, -0.011119516, -0.021341119, 0.06149526, -0.027499536, -0.0013943925, -0.060791872, 0.021295832, 0.019536817, -0.017450517, -0.017689848, -0.06287969, 0.029029777, -0.02794013, -0.020892581, -0.04343794, -0.04452916, 0.023062805, -0.00036030143, 0.054810304, -0.0047882353, -0.051674634, -0.008209593, -0.022826323, -0.082769275, 0.068403944, -0.035857156, 0.0375038, 0.021837747, 0.055980682, -0.058682214, -0.009989164, 0.028589092, -0.017329454, -0.043501, 0.031127524, -0.036791977, 0.03487207, 0.015865752, -0.013901644, -0.031382207, -0.008825678, -0.032679196, -0.0025112326, 0.039644744, 0.047850776, 0.039480958, 0.048473414, -0.022966089, 0.10160202, -0.03141435, -0.013210424, 0.030554524, -0.01766168, 0.026016774, -0.036637027, 0.002638637, 0.04644098, 0.046249747, -0.027496457, 0.026132066, -0.032983944, 0.045741774, -0.011702804, 0.041001625, 0.025523838, 0.01317721, 0.00035619808, 0.07138686, 0.032006413, 0.048128605, -0.05937428, 0.00047666268, 0.07768457, 0.065745614, 0.045708887, 0.05167484, 0.036699127, 0.044075888, 0.07544025, 0.005563494, 0.022931388, -0.021448877, 0.027738836, -0.06049568, 0.023898775, 0.00097041833, -0.030736338, 0.011460269, -0.06485867, -0.051330857, -0.02421889, -0.07106928, 0.066800945, 0.028246626, -0.00790841, -0.041564103, 0.016247021, 0.025421785, 0.01555347, 0.08140845, 0.0577104, 0.0088178655, 0.036845792, -0.03420963, 0.046915133, 0.054541215, -0.03477154, 0.002024032, -0.023456711, -0.0026599984, 0.00030727475, -0.04497442, -0.066424005, -0.0059845923, -0.013414577, -0.0066634766, -0.02254938, -0.025936583, 0.036816612, -0.07114239, -0.056953337, 0.014362161, 0.067963056, 0.05647313, -0.033586144, 0.053269226, -0.035377096, -0.075625084, -0.008647449, -0.006991434, -0.02161103, -0.023115618, -0.014669223, -0.035286196, 0.035241105, -0.010157574, 0.041964203, -0.024342932, -0.04491534, 0.01686072, 0.15007725, 0.017567854, -0.035057317, 0.04989487, -0.014410196, 0.079849645, -0.017984387, -0.037877683, -0.0055427905, -0.010605255, -0.00210061, -0.045535047, 0.026422907, 0.031879693, 0.030605959, -0.039241064, -0.0022882447, 0.034980163, -0.023993803, 0.020393644, -0.042346653, -0.0027872066, 0.034238987, 0.059073377, 0.017745376, -0.04757955, 0.008928198, -0.028489241, -0.07162072, 0.02280017, 0.047385976, 0.03564407, -0.024998993, 0.039792977, -0.016960151, 0.032625016, 0.0129018035, -0.015292085, 0.008901555, -0.02357029, 0.024863329, 0.057376962, 0.0350781, -0.0038111345, 0.039647583, 0.041311458, -0.012593854, 0.0018220166, 0.021582518, -0.021053622, -0.034413863, -0.006093655, 0.0035802536, -0.099609435, 0.06062294, -0.045883697, 0.015404698, 0.05195159, -0.0031022963, 0.03593992, -0.01619717, -0.0125057595, 0.008115051, -0.06305949, -0.028146092, -0.006884062, -0.014162648, -0.0024771597, 0.02552344, 0.025560796, -0.02124001, 0.043573078, 0.021116368, -0.020735782, 0.021645702, -0.0151948705, 0.024453921, -0.005332919, -0.020161852, 0.04281293, 0.053196747, 0.04405796, -0.04416026, -0.03456636, -0.014575961, -0.037296478, -0.0079966355, 0.029502595, -0.06808372, -0.008822236, -0.017506994, 0.016490726, -0.026405796, -0.026769735, 0.0039468133, -0.019438442, 0.032521147, 0.034848552, -0.003946603, -0.008732273, 0.0018336158, 0.021767413, -0.054527342, 0.015800785, 0.0014758749, -0.01063531, -0.05791201, 0.00052916515, -0.052595764, 0.018992908, -0.008620502, -0.024105137, -0.024837466, 0.07343456, 0.062475417, -0.019602142, 0.03071076, -0.021263797, -0.0110718, 0.021765262, 0.05769195, 0.045456357, 0.023844184, 0.024824353, -0.02713382, 0.0009197075, -0.008068059, -0.017499084, -0.012494596, 0.007510915, -0.03325832, -0.027686281, 0.05490669, -0.006310222, -0.047434274, -0.056527544, -0.0089846775, -0.013240663, -0.0010106497, 0.053647455, 0.034933154, -0.021958398, -0.035121836, 0.025348684, -0.031152863, -0.038679533, -0.02513186, 0.049870543, 0.020197157, 0.013573011, 0.053801503, -0.018113049, 0.0037997488, 0.012524442, 0.014127857, 0.055704948, 0.0063386154, 0.03573338, 0.022263717, -0.048880633, 0.05421723, -0.043142587, 0.008278142, -0.0018842363, -0.0019881167, 0.021565609, -0.004158469, -0.041573554, 0.027059488, 0.04140609, -0.04944458, 0.014455445, -0.010858066, 0.017114727, -0.03130681, -0.0067054317, -0.0057035675, 0.04610465, 0.02261927, 0.013902956, 0.0038330597, 0.026624646, 0.02378961, -0.0025881017, 0.0019414292, 0.08277258, 0.011877566, -0.020440238, 0.012699574, 0.0029269585, 0.035966042, 0.04744884, -0.045271445, 0.0128725795, 0.008546885, 0.010560749, -0.05012447, 0.023312261, -0.027402062, -0.040561896, -0.038486872, -0.0966242, 0.0051060393, -0.044217866, -0.022205105, 0.0027858939, -0.04664835, -0.041451372, 0.014975611, -0.015550401, 0.041514426, 0.0038345049, -0.029247422, -0.093997, -0.011456004, 0.034223843, -0.03410642, 0.041151408, 0.008716024, -0.02033994, -0.027159711, 0.0046082195, 0.009262975, 0.011146299, -0.0587786, 0.014949512, -0.010005044, -0.011555668, -0.022643434, 0.034462105, 0.014552569, -0.0060608005, 0.016013876, -0.008711371, -0.035508018, 0.03767841, 0.027342811, -0.0007955024, -0.018068457, 0.009145835, -0.046850394, -0.006373148, 0.030661652, -0.0870119, 0.01744904, 0.0067371367, -0.023716886, 0.03363879, -0.10733218, 0.053184997, -0.07844081, 0.002832561, -0.031800993, -0.0068189506, -0.033438288, -0.0050861645, 0.051835146, -0.026986623, 0.015037746, -0.02231085, -0.033744946, -0.07039597, -0.0739481, 0.007951557, -0.0237737, 0.042215582, 0.0069665783, 0.004247615, 0.05101054, -0.024597913, -0.04031547, 0.0038964679, -0.0060009854, -0.07562473, -0.02487762, -0.08801289, -0.013061932, -0.02354606, -0.0045180195, 0.018833924, -0.039785087, 0.027867293, 0.0123066055, -0.02491561, -0.022141404, -0.031045975, -0.061284263, -0.057623174, 0.024396464, -0.035052303, 0.02190675, 0.02861147, -0.02831549, 0.013814254, 0.03379243, 0.008799612, -0.008985111, 0.02473169, 0.035441443, -0.0065674633, -0.049922265, -0.01395163, -0.008170894, 0.097359784, -0.025037477, 0.009940462, 0.047850978, 0.009716014, -0.06050233, -0.0053205322, -0.004911557, 0.09569588, -0.039645426, 0.021967655, -0.031756643, -0.024276247, -0.03609301, -0.03808405, -0.028172335, 0.067122124, -0.031103345, -0.062894486, -0.007605858, -0.011416188, -0.07815174, -0.02522963, 0.034591857, -0.0029417695, 0.0035066295, -0.019837245, 0.06540605, -0.047672562, 0.0024494422, -0.010271298, -0.011683429, -0.013220007, 0.031526968, 0.026978439, -0.01317559, 0.034454472, 0.0036316493, 0.03858765, 0.03327432, 0.0067307693, 0.016706105, 0.039433118, -0.058149464, 0.051281277, -0.06060769, -0.050163772, 0.0073816217, 0.029024001, -0.029151313, -0.0023354492, 2.3504716e-05, -0.02803457, 0.020090759, 0.012836656, 0.010128475, -0.0498842, 0.017088287, 0.033801958, -0.0016850217, 0.06433099, 0.03772622, -0.051111512, -0.0136458855, 0.03284268, -0.03914711, -0.044828914, 0.029353814, 0.03176771, 0.04982787, -0.009347002, -0.0047025043, 0.0049502836, -0.018715525, 0.0034758367, -0.0348739, 0.030821221, -0.015568467, -0.011095636, 0.06839485, 0.017524634, 0.034052003, 0.01964667, 0.0144328615, 0.034035083, 0.0020167644, -0.014245227, 0.03581507, -0.022901969, -0.019622548, 0.037305646, 0.011413001, 0.020275563, -0.015900897, -0.024980197, -0.016915193, 0.014792825, -0.0043827705, 0.06033795, -0.027224954, 0.031051533, 0.0018879907, -0.0015919221, 0.022977872, -0.008529422, 0.029175201, -0.011882022, -0.0030052636, 0.008843563, -0.03773693, -0.018831575, 0.0026362718, 0.021863792, 0.008598345, -0.0010849979, -0.051589943, -0.0147834, -0.015793372, 0.027256852, -0.03887631, 0.048800655, -0.039819937, -0.015114874, -0.03089365, 0.08536702, 0.05948463, 0.03466869, 0.06610413, 0.017570777, -0.016509663, -0.089170516, 0.031086152, 0.011019665, -0.012326908, -0.023361519, 0.01575868, -0.061152715, 0.012428684, 0.03839507, -0.044189308, -0.025259307, 0.041219506, 0.022230746, -0.09707367, -0.051984686, -0.029335786, -0.05236734, -0.029908493, -0.01357844, -0.049437784, 0.033300143, 0.039269578, -0.02440647, 0.003969735, 0.041075632, 0.010139068, -0.012995733, -0.007494727, -0.028705698, 0.00082188204, -0.008809902, -0.018740565, -0.052104127, -0.056353454, -0.0031758966, 0.012661097, -0.028962532, 0.058633227, 0.030502062, -0.048844095, 0.006302846, -0.0108178435, -0.025131682, 0.017953945, -0.018075408, 0.018053927, -0.026429, -0.032170933, -0.004405795, 0.012295216, -0.023467956, 0.042460695, 0.023037596, -0.031674184, -0.036564704, -0.055931523, -0.019010633, -0.025046764, -0.0712555, 8.611861e-05, 0.0057757758, 0.026232066, 0.0092142075, 0.03525938, 0.022571806, 0.08190164, -0.0033449698, -0.021198032, -0.04860236, 0.013574752, -0.035698395, 0.016163062, -0.023340048, -0.014989142, 0.028393093, 0.006529506, 0.010815611, -0.032567035, -0.046195365, 0.032816473, 0.017748706, -0.02049762, -0.013504844, 0.02878078, -0.036764104, 0.075626776, 0.019785877, 0.020972997, 0.031728398, -0.083044425, -0.02931215, 0.032899506, -0.028159846, 0.03026393, -0.009694038, 0.0058308886, 0.08435889, -0.053855337, -0.0041955337, 0.0067178835, -0.000500954, 0.059708435, -0.03473651, 0.035806242, -0.07816992, -0.081534356, -0.081089124, 0.03987137, 0.02991362, 0.081208974, 0.011049659, -0.053723138, -0.00076049764, -0.0312624, 0.025069578, -0.04062, -0.025072401, 0.00048030837, 0.052829657, 0.02125865, 0.050059285, -0.06767218, -0.015226169, -0.013393508, 0.027979143, 0.046253514, -0.016436914, -0.007504613, 0.036668144, 0.01840988, 0.035528705, 0.04147602, -0.02025752, 0.022766791]\",\n          \"[0.027675966, -0.01612932, -0.01800864, 0.019673012, 0.08769466, 0.0014769429, 0.010704665, -0.005236023, 0.047188684, 0.03761532, -0.016372254, 0.015939767, 0.004009486, -0.04007521, 0.024605079, -0.03173427, 0.030920763, 0.03988214, 0.012887524, -0.03022114, -0.015708633, 0.059043355, -0.016023291, -0.0025308754, -0.04073864, -0.020692555, 0.016963478, -0.07814157, -0.022853358, 0.020579195, -0.03407056, -0.0009133024, -0.08117961, 0.019255063, 0.012193699, -0.06767274, 0.045964666, 0.024942322, 0.004203056, 0.025900425, -0.0016766512, -0.050967444, -0.0025331134, -0.0070740036, -0.017477605, -0.048568357, 0.032993488, 0.04355646, 0.026935793, -0.011673787, 0.02362909, 0.021656943, 0.0323811, -0.03568458, 0.016999958, -0.018094022, 0.057677917, -0.026483634, -0.06923171, -0.015768759, 0.048599586, -0.012578989, -0.0045933896, 0.117373705, -0.0022148765, 0.0087092025, -0.0121498285, 0.0010725158, 0.018069291, -0.029773567, -0.0065932665, -0.058149047, 0.012317347, -0.020933958, -0.0029607306, -0.071151935, -0.010031551, 0.050417494, 0.01571768, 0.05829994, -0.031246232, -0.059578426, -0.06458616, -0.06434521, -0.11007681, -0.0056985705, -0.043544326, -0.004529563, 0.026534904, 0.030224213, -0.006699872, -0.007103079, 0.052954294, -0.024562245, -0.03467211, 0.029829651, -0.02841984, -0.022974577, 0.0036460643, -0.027065475, 0.007957817, -0.024981046, -0.043634426, 0.004404129, 0.020623393, -0.005649733, -0.008119603, 0.037668515, 0.0076730195, 0.013393152, -0.07156598, -0.04496251, 0.0020098502, -0.011508041, 0.045349885, -0.02522553, -0.023734875, 0.08672422, 0.050680164, 0.0198079, -0.013141651, 0.0037596012, 0.04458242, -0.00033742396, -0.003432677, -0.04174845, -0.01704, 0.012852614, 0.07272834, 0.023587443, -0.0077364137, -0.033728167, 0.03521725, 0.026903296, 0.044284433, 0.05662702, 0.07743406, 0.017095689, 0.02821482, 0.08341511, -0.0010819075, 0.0060468814, -0.05681742, 0.050414428, -0.04712003, 0.042968903, -0.02288141, -0.03897936, 0.039459962, -0.0141917085, -0.018188039, 0.027760865, -0.037837904, 0.0067343274, 0.04386743, 0.003132913, 0.0075851004, 0.019935615, -0.020300878, 0.017186366, 0.050820228, 0.030662283, 0.009661271, -0.0046147867, -0.04283695, 0.017464038, 0.037063424, 0.028257443, 0.021280915, 0.0013056456, -0.012006613, 0.025307624, -0.05520984, -0.0548776, -0.0023381659, -0.006577864, -0.022175927, 0.01845564, -0.011816793, -0.025315449, -0.01844265, -0.058456443, 0.032645937, 0.090748034, 0.04877724, -0.043265507, 0.0295654, -0.053176194, -0.03486045, 0.03926745, -0.020162154, -0.029962305, -0.027866887, -0.00030181682, -0.024843324, 0.0048829764, 0.03379248, 0.0054697907, 0.03864054, -0.044570196, 0.020876372, 0.050190754, 0.036993105, -0.042230647, -0.005957735, -0.023794057, 0.07518761, 0.0016025587, -0.030024076, 0.022407368, -0.055284034, 0.0257843, -0.04810012, 0.02377809, 0.059912764, 0.019271413, -0.032413855, 0.025026409, -0.008705957, -0.042916957, -0.0059005506, -0.002629854, -0.065149724, 0.02793766, 0.018158302, 0.06561853, -0.07060635, 0.038004383, -0.0020515942, -0.06500418, 0.037001856, 0.053380176, 0.03387651, -0.0096498635, 0.065369576, -0.012048983, 0.05130614, 0.016552823, 0.0028370486, 0.0043916157, -0.016337922, 0.08983495, 0.034016266, -0.023891885, -0.039697934, -0.0058055203, -0.00906385, 0.032780714, 0.0009496314, 0.053801235, -0.00042002762, -0.05333777, 0.014142019, 0.0064763557, -0.021699158, 0.08151805, -0.07694629, -0.01921763, 0.019488262, 0.0072593256, 0.03883878, -0.0019574403, 0.03849201, -0.013261135, -0.059373863, -0.008145858, 0.007444049, -0.002457871, 0.032179423, -0.020000542, 0.015337558, 0.01255017, 0.009872871, 0.015436845, -0.026779529, 0.003436445, -0.054981563, 0.027686138, -0.0016216725, -0.013636503, 0.0113748815, 0.045526583, 0.032431882, -0.0319864, -0.010411737, -0.005455975, -0.03377873, -0.016305279, 0.05518679, -0.036521833, -0.0631332, -0.005139374, 0.019523894, 0.019637423, -0.06632776, -0.045619722, -0.058334578, 0.025116371, -0.015115836, -0.02673088, -0.0045423615, -0.009782015, 0.0240998, -0.09860343, 0.003611928, 0.05252091, 0.020025449, -0.06811288, 0.01391455, -0.031722445, 0.014957263, -0.015364046, -0.047692735, -0.022694254, 0.0760938, 0.04835445, -0.028068243, 0.041305497, -0.0054453714, 0.030571198, 0.012924156, 0.118531026, -0.004661583, 0.011725988, -0.0021956384, -0.026064696, -0.0024054935, 0.002144951, -0.026255423, 0.0064709187, -0.013892847, -0.03151195, 0.020829773, 0.017528903, 0.041837968, 0.016407095, -0.027098997, -0.021811577, -0.033093296, 0.013941682, 0.0143096065, 0.006511291, -0.03181643, 0.006894264, 0.009564878, -0.027546357, -0.01158202, 0.0069181626, 0.05081759, 0.040569328, -0.028530339, 0.056301963, -0.022616893, -0.0038847341, -0.014485847, 0.033814427, 0.077356376, -0.041799184, 0.0584242, -0.033250395, -0.01642551, 0.0330074, -0.012425451, -0.007753761, -0.030952455, 0.065939896, 0.04130442, -0.021447025, -0.0124002015, 0.0013733932, -0.0010912487, -0.01946465, 0.021435713, 0.0071981526, -0.015114469, 5.1663414e-05, -0.06416092, -0.03810816, 0.04617874, 0.030577064, -0.039076257, -0.05411576, 0.07140274, 0.053727534, 0.021613533, -0.010445244, 0.04294357, 0.03607126, 0.00045055617, 0.035061814, 0.020898245, 0.0400037, 0.10034637, 0.027788682, -0.03512738, -0.0134721445, 0.0003513701, -0.013834071, 0.009900359, -0.028441945, -0.008304218, -0.023436388, -0.048222836, -0.039695732, 0.016395189, -0.022153959, -0.02089958, -0.036257826, -0.041326817, -0.008058679, 0.04642291, -0.004465084, 0.008230223, -0.062921904, -0.044184145, 0.013146781, 0.08177235, 0.024453985, 0.016383596, 0.008152205, -0.012304891, -0.018541295, 0.014353672, -0.014510783, 0.018932883, -0.027113035, -0.0064370856, -0.06366259, -0.018246682, 0.020128, 0.06900221, 0.015200609, 0.024608895, 0.015775722, -0.01994665, -0.015818736, 0.037445914, -0.0034323533, -0.04521333, -0.001612955, -0.0050725294, -0.039193094, 0.035449997, -0.012086672, -0.08428125, -0.0088579785, -0.012092078, -0.08069083, 0.047093075, -0.05322072, -0.008609815, -0.069364436, -0.030420432, -0.03122492, -0.0030653144, -0.036007345, -0.008546834, 0.039641444, -0.016551128, 0.03993006, -0.031430162, -0.041737508, -0.026878018, -0.069476835, 0.014932759, -0.00014464739, 0.01760366, 0.01683364, -0.014240731, 0.0657493, 0.015695214, -0.042684376, -0.057617, -0.00467858, -0.039027512, 0.01491829, -0.06014583, -0.021504562, -0.07206856, -0.022239447, -0.0255402, -0.030811481, 0.04251652, 0.043125328, 0.0031627275, -0.0069473227, 0.004316198, -0.071415074, -0.010020968, 0.02281009, -0.021734204, 0.0003373096, -0.016529465, -0.03294286, -0.0272521, 0.017854195, 0.009275156, -0.03547088, 0.009734336, -0.03088642, -0.0015759157, -0.0012967673, -0.011490113, 0.0005814644, 0.060421813, -0.03301611, -0.01231995, 0.017018076, 0.0013539401, -0.005369835, 0.030433385, -0.025683973, 0.059653193, 0.011631123, 0.055976342, -0.016335404, -0.0386575, 0.01385507, 0.0007230891, -0.0151380515, 0.024919085, -0.06017463, -0.048220735, 0.005097666, 0.045513146, -0.01894805, 0.002825925, 0.0590752, -0.016258385, 2.7603073e-06, 0.010392405, 0.08111331, 0.00660095, 0.0104566, 0.03462871, -0.008173586, -0.015932271, 0.02203306, 0.014376814, -0.034793016, 0.0010091469, 0.009408765, 0.025122888, 0.037452765, -0.0065730573, 0.013123663, 0.010308766, -0.07098793, 0.03411925, -0.04683957, -0.013280506, -0.03233291, 0.030746462, -0.0229811, 0.06990299, 0.0113449115, -0.044929266, -0.038195364, -0.020347761, 0.014470902, 0.0054418365, -0.037563495, -0.013889957, -0.023238225, 0.07328361, 0.03168113, -0.025752222, -0.012130841, 0.053192914, -0.013078436, -0.02072352, 0.045382317, 0.04460789, -0.03828968, 0.0027211078, -0.06356088, 0.0061691534, -0.018233955, 0.0007499137, -0.023740232, 0.04439971, -0.022003299, 0.010365031, -0.009215394, 0.0040893084, 0.013858671, -0.034705628, -0.004722424, 0.055659197, 0.0123139, -0.054872423, 0.01825299, -0.027131774, -0.0294574, -0.018494865, -0.020046894, -0.0077307275, 0.0047810683, -0.011382611, -0.033190183, 0.032056194, -0.030049503, 0.047765687, -0.031619452, -0.008771251, -0.011424602, 0.017476402, 0.007484648, 0.0024974286, -0.004101797, -0.0030271013, -0.021823222, 0.02989468, -0.03326814, -0.027371842, 0.019614125, 0.058687408, 0.052148078, -0.03186921, -0.042316616, 0.021750579, -0.024660269, 0.07660149, 0.026324268, 0.0777513, 0.03646266, 0.020851387, -0.0315803, 0.032615405, 0.025321182, 0.060765926, 0.048275366, -0.0026019288, 0.025151078, -0.09037988, 0.009021032, -0.006359098, -0.005570726, -0.037879802, 0.021299742, -0.062342457, 0.01798802, 0.014602596, -0.054039486, -0.024831016, 0.083493255, -0.003513094, -0.09037449, -0.07484794, -0.05158382, -0.03678857, 0.019955486, -0.054251548, 0.024334233, 0.012189318, 0.013998879, -0.07653803, -0.001718273, 0.02270536, -0.008967865, -0.014876336, 0.0075326655, -0.07057929, -0.040501736, -0.014931589, -0.0061304853, -0.05611491, -0.0628631, -0.025042905, 0.016529433, -0.053267516, 0.035220414, 0.051314954, -0.019800032, -0.0187396, 0.03594137, -0.029316759, 0.029639842, -0.01992964, 0.035974585, -0.0053622224, -0.06312758, -0.010742655, 0.00526042, -0.039760027, 0.05622947, 0.031675894, -0.0077257953, -0.022595976, -0.05521128, 0.046031974, -0.00045437642, 0.0077672335, 0.034348994, 0.016287358, -0.010698653, 0.030355927, -0.043612383, -0.0066668135, 0.042104576, -0.025710344, 0.009196928, 0.033567633, 0.008937168, -0.035637718, -0.014567004, 0.012291415, 0.017134469, 0.03787628, 0.05196295, -0.00070549204, 0.0073756604, -0.06063891, 0.027032394, -0.01596697, -0.028449211, -0.00155747, 0.017781194, -0.06589172, 0.089242466, -0.0029324435, 0.014563134, 0.01385987, -0.08555971, -0.0352584, 0.0051131835, -0.04445287, 0.029864473, 0.010322693, -0.01683466, 0.071051225, -0.025775362, -0.01133975, -0.01596289, 0.0021871894, 0.06297361, -0.018191455, 0.01467534, -0.038454555, -0.07423649, -0.032458577, 0.009555706, -0.011337193, 0.02269034, 0.049823597, -0.035507333, -0.05329748, -0.060757328, -0.039041303, -0.00012414607, 0.047837537, 0.025653662, 0.029209865, 0.115555964, 0.02340641, -0.029865667, -0.025147354, -0.012347484, -0.00016333566, 0.009588136, -0.062415633, 0.0024092172, -0.017962312, 0.033762064, 0.010857769, -0.018301006, -0.012766848, -0.056348305]\",\n          \"[0.05334512, -0.03868564, -0.003815435, -0.027850023, 0.053773407, -0.0071435045, -0.0111352755, -0.026881963, -0.01871548, 0.041413337, 0.022343365, -0.023239233, -0.012897725, -0.011550138, 0.04171863, -0.01794159, 0.024748972, 0.020319102, -0.024958853, -0.026163878, -0.0034447275, 0.0443265, -0.034647644, -0.0304099, -0.015763383, -0.04701259, 0.013211924, -0.0859851, -0.018593837, 0.03989899, -0.05635889, 0.0076722833, -0.04759918, 0.027307916, -0.0002726291, -0.037822522, 0.03143109, -0.0016388495, -0.0030644727, 0.028814116, -0.0016515774, -0.021339208, -0.026085967, -0.035034984, 0.00885767, -0.019883707, 0.049804717, 0.051875707, 0.018189449, -0.054355755, 0.027847763, 0.014522491, 0.027856683, -0.040951136, 0.047992386, -0.043827225, 0.06755898, 0.017863216, -0.055008974, -0.0009697866, 0.029096825, -0.0025427376, -0.043893833, 0.09491934, 0.028452499, -0.012437704, 0.016564261, 0.005197711, 0.03717712, -0.003757467, 0.026775239, -0.025553681, 0.04741475, -0.041754063, -0.06477641, -0.029253524, -0.050278567, 0.027960503, 0.027428921, 0.0122253215, -0.020352153, -0.044482518, -0.03258776, -0.022380956, -0.077032484, 0.042114962, -0.014324117, 0.006950146, -0.0024551142, 0.043540474, -0.048193455, -0.046761446, 0.037963994, -0.040826615, -0.040466733, 0.025545632, -0.07005082, -0.010861434, 0.012878206, -0.021318419, 0.014157929, -0.037048455, -0.044304844, 0.016764566, -0.017363299, -0.014922313, 0.03220124, 0.032717615, -0.010233005, 0.07573268, -0.037230313, -0.044922333, -0.0036990158, 0.0071796356, 0.03589815, -0.010331555, -0.0388288, 0.008191538, 0.035142653, 0.023591157, 0.044057913, -0.0010384555, 0.022635907, 0.00015242462, 0.057561625, -0.015496639, -0.010376354, 0.0052072946, 0.057756096, 0.029053751, 0.01838159, -0.052449748, 0.0047794417, 0.029515006, 0.037543293, 0.05098097, 0.08702503, 0.035573408, 0.04176663, 0.071972124, -0.015004921, 0.023894034, -0.002637107, 0.061491117, -0.041956566, 0.042618055, -0.023593375, -0.032825354, 0.0024061704, -0.008718, -0.0011018572, -0.038745172, -0.049942303, 0.045215692, 0.08674108, -0.008502659, -0.009508976, 0.042957895, 0.018410604, -0.021588245, 0.06622194, 0.015338091, 0.009098114, 0.045558944, -0.04583623, 0.018795175, 0.0337645, -0.00131688, 0.002292315, 0.0024526683, 0.0042728833, 0.01907755, -0.040411614, -0.044386223, -0.015339377, -0.07895421, -0.027505782, -0.01355952, -0.06536835, 0.00048652396, -0.014855626, 0.0035582625, -0.012949567, 0.025742594, 0.04078109, -0.008620362, 0.016935024, -0.04468814, -0.036431212, 0.013336837, 0.012380788, -0.016363306, -0.039013725, 0.0069572837, -0.0071046595, 0.050747424, -0.002046442, 0.007529746, 0.040320273, -0.033236474, -0.0046072844, 0.0760783, 0.01565941, -0.025597537, -0.024123866, -0.029292993, 0.0660606, -0.050358463, -0.009716832, 0.038640767, -0.06321313, 0.030134978, -0.03052134, 0.060070433, 0.04815661, -0.029793883, 0.012571778, 0.024917984, 0.013314703, -0.049185816, 0.012817417, 0.0065044807, -0.026436996, 0.016474508, 0.022131866, 0.05499648, -0.095696665, 0.05598576, -0.00959332, -0.07994606, 0.025739187, 0.048553877, -0.012984153, -0.043573402, 0.03212413, -0.02367307, 0.018609053, 0.033829954, -0.00551221, 0.008401652, -0.03163106, 0.028799035, 0.056887113, -0.0077031003, -0.018231003, 0.025548527, 0.026314413, 0.023383649, -0.035253566, 0.039875757, -0.024191905, -0.06552958, 0.015145615, 0.020154895, -0.066362776, 0.07953172, -0.07545048, -0.01798337, 0.027549917, 0.005233899, 0.06268486, -0.044923913, 0.015584899, 0.02147083, -0.053774126, -0.0069668186, 0.011331592, -0.0430505, -0.0032039108, -0.013643068, 0.0096913325, -0.039961092, 0.054184962, -0.008979204, -0.036204856, 0.0037574323, -0.016705016, 0.039916243, -0.016381636, -0.08687614, 0.027957242, 0.04948789, 0.031943448, -0.057290174, -0.042277932, -0.023002712, -0.047017496, 0.006684452, 0.054534316, -0.056737285, -0.07498496, -0.009375836, 0.025543522, 0.03028308, -0.06906246, 0.005863897, 0.03279533, 0.023197096, 0.0640316, -0.010762583, -0.03148228, 0.0031338094, -0.0072938614, -0.06358541, -0.005270622, -0.008926155, 0.021963716, -0.05552044, 0.024500206, -0.0036044843, 0.016203098, -0.0019299133, -0.03012397, -0.011156799, 0.06323655, 0.03971083, -0.0037787058, 0.062443055, -0.0064758747, 0.027825642, -0.0058271047, 0.10660979, 0.0768696, -0.005721021, 0.0006469746, -0.0060702893, -0.0037615518, 0.024443692, 0.019890888, 0.0004614053, -0.055237398, -0.061259262, -0.013920842, 0.032681175, 0.013193363, 0.008091507, -0.05888119, 0.028916609, -0.024801744, 0.014784777, 0.043455012, 0.042146776, -0.053490814, -0.026390158, -0.012684587, -0.062528014, 0.0007469724, 0.009444067, 0.055342283, 0.004789, -0.009570944, 0.0647348, -0.05427646, -0.030443273, 0.004453014, -0.0065536685, 0.043011244, 0.007335343, 0.01579795, -0.015037961, -0.062222652, 0.083001934, -0.0071070213, -0.017438611, -0.023761323, 0.039175898, 0.013001254, -0.021472273, -0.03829355, 0.040560693, 0.03135187, -0.03742055, -0.0017571095, -0.031136084, 0.03912493, -0.023099659, -0.042291485, -0.06915903, 0.04400628, 0.06700761, -0.011770504, -0.043494806, 0.04672133, 0.05778405, -0.018912366, -0.022868197, 0.060825825, 0.016874006, 0.0073900563, -0.010002537, 0.021573996, 0.005962376, 0.0491491, 0.03449636, -0.021416446, -0.0072996067, -0.027963754, -0.02216488, -0.0016100897, 0.018953698, -0.01317025, -0.031108452, -0.07793239, -0.040982008, -0.0043924483, -0.020185677, 0.024924824, -0.041641675, -0.026849264, -0.015949076, -0.012861395, 0.017245725, 0.025614774, -0.049223013, -0.036123235, 1.6120146e-06, 0.07790485, 0.019067246, 0.0075618587, 0.04324853, 0.014127279, 0.013150057, 0.0051650223, -0.0032270255, 0.03348731, -0.014980418, 0.0034561425, -0.030796885, -0.009452268, -0.0145541215, 0.049650297, 0.009352835, 0.013921525, -0.006638107, -1.4916843e-05, -0.031857543, 0.048845977, 0.0021973464, -0.0017968399, 0.02209603, 0.02006871, -0.031193376, 0.020376863, 0.014560888, -0.07205752, 0.03282666, 0.0031717056, -0.03392489, 0.025016325, -0.10766173, -0.011725264, -0.07139651, 0.021297976, -0.03277813, -0.027867323, -0.028798854, 0.008917343, 0.07009347, -0.041110456, 0.042566214, -0.054028656, -0.011037139, -0.026996415, -0.07548647, 0.013021667, -0.011179112, -0.003935323, -0.027333036, -0.013578021, 0.064508006, -0.0028996565, -0.06760958, 0.026824463, 0.034613468, -0.012324174, 0.0002846172, -0.04743452, -0.029777672, -0.01504816, -0.0115172, 0.031418037, -0.03131142, 0.046704125, 0.066929944, 0.015085166, 0.0032888376, -0.021353824, -0.042654254, -0.034337036, -0.0053100474, -0.022187805, 0.0035262338, -0.031869933, -0.04224167, -0.011481201, 0.05600788, -0.036872935, -0.00388018, -0.007399795, 0.028899776, 0.021440739, -0.042942062, 0.0030954145, 0.043310046, 0.05675842, -0.06413164, 0.02868405, 0.052379712, -0.010950414, -0.0380795, 0.019054776, -0.04667921, 0.0032908218, 0.027224576, 0.051181495, 0.0003472255, -0.036479842, 0.0024089655, 0.0021863838, -0.038180567, 0.020836549, -0.03288323, -0.03984082, 0.010270869, 0.028481523, -0.1216333, 0.036443643, 0.047073785, -0.021171005, -0.019994492, -0.030081859, 0.040892594, -0.019698361, -0.0036367078, 0.009343664, -0.022612732, 0.032733306, 0.03982301, 0.020052863, -0.00945905, 0.020473236, 0.0006271707, 0.058954712, 0.04027679, 0.005659914, 0.0066413516, 0.009159549, -0.05970646, 0.018969906, -0.025617097, -0.026128853, 0.028940285, 0.020558901, -0.040809028, 0.054443367, -0.004874267, -0.015153521, -0.00024793134, 0.016840119, 0.040159546, 0.002155261, -0.0138193015, 0.02345569, 0.002177301, 0.106234066, 0.01276331, -0.085579954, -0.012877629, 0.046544965, 0.020417461, -0.030211953, 0.035001833, 0.0077106813, 0.01900397, 0.02703751, -0.053472187, -0.019086493, 0.00428958, -0.0069794697, -0.017369961, 0.030781267, 0.03551536, 0.0048415153, 0.008016774, 0.042204764, 0.01922613, 0.04775945, 0.007525864, 0.04958513, -0.016124144, -0.05221883, 0.040309303, -0.017692946, -0.006757297, 0.0021398389, -0.008799435, 0.030151503, -0.023093767, -0.023980128, -0.024815168, 0.040575135, -0.028407246, 0.06408012, -0.049343437, 0.004522241, 0.01135044, -0.0047875787, -0.0014327575, 0.002449477, 0.006380749, 0.012606505, -0.017175775, 0.013629724, -0.014124491, -0.0178965, -0.037766375, 0.0043482524, 0.022445064, -0.040581662, -0.07602456, 0.017128633, -0.030821191, 0.010021304, -0.006262188, 0.037981182, -0.018636422, -0.029575236, -0.06029288, 0.05234343, 0.031536553, 0.035213273, 0.0463015, 0.0036708014, 0.0052345223, -0.050606936, 0.008256714, 0.02625674, -0.009607635, -0.0486939, 0.001669477, -0.071560495, 0.007041467, 0.07489814, -0.035134487, -0.044674326, 0.05438347, 0.013408014, -0.08244932, -0.06348855, -0.039674517, -0.026404835, -0.014855903, 0.005471334, -0.02302797, 0.007746313, -0.024981523, -0.046705868, 0.015537092, 0.017301518, 0.013637719, -0.05366216, -0.040013168, -0.018202893, -0.021289667, 0.007867972, -0.014348681, -0.054169655, -0.048515085, -0.004302536, 0.023561344, -0.05479715, 0.028102312, 0.071422175, -0.058051806, 0.0022482222, 0.01792397, -0.022148492, 0.026408166, -0.024048848, 0.059825547, 0.002632954, -0.0495286, 0.0022784234, 0.038764212, 0.00040144072, 0.030310614, 0.057940416, -0.01508035, -0.055378407, -0.051107764, 0.0038468342, -0.003155755, -0.026685834, 0.053139184, 0.022516226, 0.008175126, 0.016566997, 0.007076917, 0.014594105, 0.031596467, -0.014664266, -0.014177987, 0.0023916138, 0.0011586244, -0.038934156, 0.0031808876, -0.017630463, 0.0031040858, 0.015885863, 0.01965553, 0.02711403, -0.012510712, -0.049734417, 0.043539256, 0.019309346, -0.0727483, 0.00092066504, 0.08422341, -0.036712494, 0.060770884, 0.045213927, -0.0071196854, 0.022853747, -0.08573728, -0.005934812, 0.036175787, -0.03282357, 0.0365851, -0.004212834, -0.04486637, 0.092557974, -0.013356924, -0.06595603, -0.0150398305, -0.025142767, 0.043250445, -0.021360701, 0.049494747, -0.05258313, -0.057783876, -0.058879178, 0.02602606, 0.014588093, 0.08601702, 0.007908378, -0.027793288, 0.013667886, -0.040338863, -0.016787011, -0.030427827, 0.009063525, 0.028942192, 0.025336813, -0.007511073, 0.045527868, -0.02742367, -0.024122508, -0.02945458, 0.022295559, 0.028236434, -0.02587762, 0.014016392, 0.044975262, 0.02490689, 0.008495326, 0.005227856, 0.017179709, 0.0007806002]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   user_id  book_id     timestamp\n",
              "0     4456     8581  1.687541e+09\n",
              "1      142     1964  1.679585e+09\n",
              "2      362     3705  1.706872e+09\n",
              "3     1809    11317  1.673533e+09\n",
              "4     4384     1323  1.681402e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ccf3472-23d9-43a0-9a6a-7b0f1c5c2e4a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4456</td>\n",
              "      <td>8581</td>\n",
              "      <td>1.687541e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>142</td>\n",
              "      <td>1964</td>\n",
              "      <td>1.679585e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>362</td>\n",
              "      <td>3705</td>\n",
              "      <td>1.706872e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1809</td>\n",
              "      <td>11317</td>\n",
              "      <td>1.673533e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4384</td>\n",
              "      <td>1323</td>\n",
              "      <td>1.681402e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ccf3472-23d9-43a0-9a6a-7b0f1c5c2e4a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ccf3472-23d9-43a0-9a6a-7b0f1c5c2e4a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ccf3472-23d9-43a0-9a6a-7b0f1c5c2e4a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6db56df1-156a-4248-803c-69bd133ff648\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6db56df1-156a-4248-803c-69bd133ff648')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6db56df1-156a-4248-803c-69bd133ff648 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2098,\n        \"min\": 142,\n        \"max\": 4456,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          142,\n          4384,\n          362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4371,\n        \"min\": 1323,\n        \"max\": 11317,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1964,\n          1323,\n          3705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12801198.97249742,\n        \"min\": 1673533162.0,\n        \"max\": 1706871659.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1679585406.0,\n          1681402162.0,\n          1706871659.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                               Title  \\\n",
              "0  Classification décimale universelle : édition ...   \n",
              "1  Les interactions dans l'enseignement des langu...   \n",
              "2  Histoire de vie et recherche biographique : pe...   \n",
              "3  Ce livre devrait me permettre de résoudre le c...   \n",
              "4                    Les années glorieuses : roman /   \n",
              "\n",
              "                     Author  \\\n",
              "0                       NaN   \n",
              "1  Cicurel, Francine, 1947-   \n",
              "2                       NaN   \n",
              "3     Mazas, Sylvain, 1980-   \n",
              "4   Lemaitre, Pierre, 1951-   \n",
              "\n",
              "                                          ISBN Valid     Publisher  \\\n",
              "0                          9782871303336; 2871303339   Ed du CEFAL   \n",
              "1                          9782278058327; 2278058320        Didier   \n",
              "2                          2343190194; 9782343190198   L'Harmattan   \n",
              "3  9782365350020; 236535002X; 9782365350488; 2365...       Vraoum!   \n",
              "4  9782702180815; 2702180817; 9782702183618; 2702...  Calmann-Lévy   \n",
              "\n",
              "                                            Subjects  book_id           ISBN  \\\n",
              "0  Classification décimale universelle; Indexatio...        0  9782871303336   \n",
              "1  didactique--langue étrangère - enseignement; d...        1  9782278058327   \n",
              "2  Histoires de vie en sociologie; Sciences socia...        2     2343190194   \n",
              "3  Moyen-Orient; Bandes dessinées autobiographiqu...        3  9782365350020   \n",
              "4  France--1945-1975; Roman historique; Roman fra...        4  9782702180815   \n",
              "\n",
              "                                    google_api_title      author_clean  \\\n",
              "0                Classification décimale universelle               NaN   \n",
              "1   Les interactions dans l'enseignement des langues  Cicurel Francine   \n",
              "2          Histoire de vie et recherche biographique               NaN   \n",
              "3  Ce livre devrait me permettre de résoudre le c...     Mazas Sylvain   \n",
              "4                              Les années glorieuses   Lemaitre Pierre   \n",
              "\n",
              "                                      embedded_title  \n",
              "0  [-0.010769891, -0.087789156, -0.048586313, 0.0...  \n",
              "1  [0.027142433, -0.020540524, -0.0023190805, 0.0...  \n",
              "2  [0.05334512, -0.03868564, -0.003815435, -0.027...  \n",
              "3  [0.02292607, -0.039551307, -0.024395213, -0.00...  \n",
              "4  [0.027675966, -0.01612932, -0.01800864, 0.0196...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d899d18-50d0-491d-8367-d9412609a06e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Author</th>\n",
              "      <th>ISBN Valid</th>\n",
              "      <th>Publisher</th>\n",
              "      <th>Subjects</th>\n",
              "      <th>book_id</th>\n",
              "      <th>ISBN</th>\n",
              "      <th>google_api_title</th>\n",
              "      <th>author_clean</th>\n",
              "      <th>embedded_title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Classification décimale universelle : édition ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9782871303336; 2871303339</td>\n",
              "      <td>Ed du CEFAL</td>\n",
              "      <td>Classification décimale universelle; Indexatio...</td>\n",
              "      <td>0</td>\n",
              "      <td>9782871303336</td>\n",
              "      <td>Classification décimale universelle</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[-0.010769891, -0.087789156, -0.048586313, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Les interactions dans l'enseignement des langu...</td>\n",
              "      <td>Cicurel, Francine, 1947-</td>\n",
              "      <td>9782278058327; 2278058320</td>\n",
              "      <td>Didier</td>\n",
              "      <td>didactique--langue étrangère - enseignement; d...</td>\n",
              "      <td>1</td>\n",
              "      <td>9782278058327</td>\n",
              "      <td>Les interactions dans l'enseignement des langues</td>\n",
              "      <td>Cicurel Francine</td>\n",
              "      <td>[0.027142433, -0.020540524, -0.0023190805, 0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Histoire de vie et recherche biographique : pe...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2343190194; 9782343190198</td>\n",
              "      <td>L'Harmattan</td>\n",
              "      <td>Histoires de vie en sociologie; Sciences socia...</td>\n",
              "      <td>2</td>\n",
              "      <td>2343190194</td>\n",
              "      <td>Histoire de vie et recherche biographique</td>\n",
              "      <td>NaN</td>\n",
              "      <td>[0.05334512, -0.03868564, -0.003815435, -0.027...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas, Sylvain, 1980-</td>\n",
              "      <td>9782365350020; 236535002X; 9782365350488; 2365...</td>\n",
              "      <td>Vraoum!</td>\n",
              "      <td>Moyen-Orient; Bandes dessinées autobiographiqu...</td>\n",
              "      <td>3</td>\n",
              "      <td>9782365350020</td>\n",
              "      <td>Ce livre devrait me permettre de résoudre le c...</td>\n",
              "      <td>Mazas Sylvain</td>\n",
              "      <td>[0.02292607, -0.039551307, -0.024395213, -0.00...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Les années glorieuses : roman /</td>\n",
              "      <td>Lemaitre, Pierre, 1951-</td>\n",
              "      <td>9782702180815; 2702180817; 9782702183618; 2702...</td>\n",
              "      <td>Calmann-Lévy</td>\n",
              "      <td>France--1945-1975; Roman historique; Roman fra...</td>\n",
              "      <td>4</td>\n",
              "      <td>9782702180815</td>\n",
              "      <td>Les années glorieuses</td>\n",
              "      <td>Lemaitre Pierre</td>\n",
              "      <td>[0.027675966, -0.01612932, -0.01800864, 0.0196...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d899d18-50d0-491d-8367-d9412609a06e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7d899d18-50d0-491d-8367-d9412609a06e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7d899d18-50d0-491d-8367-d9412609a06e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2adc1848-e4d5-4abb-a941-690ecb0a4d3b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2adc1848-e4d5-4abb-a941-690ecb0a4d3b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2adc1848-e4d5-4abb-a941-690ecb0a4d3b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(items\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues : agir professoral et pratiques de classe /\",\n          \"Les ann\\u00e9es glorieuses : roman /\",\n          \"Histoire de vie et recherche biographique : perspectives sociohistoriques /\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel, Francine, 1947-\",\n          \"Mazas, Sylvain, 1980-\",\n          \"Lemaitre, Pierre, 1951-\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN Valid\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327; 2278058320\",\n          \"9782702180815; 2702180817; 9782702183618; 2702183611\",\n          \"2343190194; 9782343190198\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Publisher\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Didier\",\n          \"Calmann-L\\u00e9vy\",\n          \"L'Harmattan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subjects\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"didactique--langue \\u00e9trang\\u00e8re - enseignement; didactique--langue - enseignement\",\n          \"France--1945-1975; Roman historique; Roman fran\\u00e7ais; Litt\\u00e9rature fran\\u00e7aise\",\n          \"Histoires de vie en sociologie; Sciences sociales--M\\u00e9thodologie; Actes de congr\\u00e8s\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISBN\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"9782278058327\",\n          \"9782702180815\",\n          \"2343190194\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"google_api_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Les interactions dans l'enseignement des langues\",\n          \"Les ann\\u00e9es glorieuses\",\n          \"Histoire de vie et recherche biographique\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"author_clean\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cicurel Francine\",\n          \"Mazas Sylvain\",\n          \"Lemaitre Pierre\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embedded_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"[0.027142433, -0.020540524, -0.0023190805, 0.023604088, 0.00027529796, 0.017977564, 0.03452997, -0.0474766, 0.015225577, 0.052039135, -0.00036042446, -0.02997406, -0.040366422, -0.04519187, 0.054508, -0.015482123, 0.044681873, -0.022422874, 0.012578571, 0.013673336, -0.011722488, 0.037818618, 0.00047222737, -0.008002775, 0.0016725715, 0.0016066253, 0.018150209, -0.039469957, -0.036887415, 0.016883975, -0.026982145, -0.00012661815, -0.0479128, -0.013174155, -0.026351985, -0.010624157, -0.009502069, 0.025267933, 0.0059955204, -0.01497183, -0.018615108, -0.018552283, -0.021930577, -0.05262457, 0.014632506, -0.037593767, 0.04726378, 0.048031423, -0.02075533, -0.061559338, 0.046888605, 0.024475658, 0.053917464, -0.042040538, 0.025207626, -0.034834586, 0.051548373, 0.038185775, -0.04597259, -0.03408335, -0.017298982, -0.011119516, -0.021341119, 0.06149526, -0.027499536, -0.0013943925, -0.060791872, 0.021295832, 0.019536817, -0.017450517, -0.017689848, -0.06287969, 0.029029777, -0.02794013, -0.020892581, -0.04343794, -0.04452916, 0.023062805, -0.00036030143, 0.054810304, -0.0047882353, -0.051674634, -0.008209593, -0.022826323, -0.082769275, 0.068403944, -0.035857156, 0.0375038, 0.021837747, 0.055980682, -0.058682214, -0.009989164, 0.028589092, -0.017329454, -0.043501, 0.031127524, -0.036791977, 0.03487207, 0.015865752, -0.013901644, -0.031382207, -0.008825678, -0.032679196, -0.0025112326, 0.039644744, 0.047850776, 0.039480958, 0.048473414, -0.022966089, 0.10160202, -0.03141435, -0.013210424, 0.030554524, -0.01766168, 0.026016774, -0.036637027, 0.002638637, 0.04644098, 0.046249747, -0.027496457, 0.026132066, -0.032983944, 0.045741774, -0.011702804, 0.041001625, 0.025523838, 0.01317721, 0.00035619808, 0.07138686, 0.032006413, 0.048128605, -0.05937428, 0.00047666268, 0.07768457, 0.065745614, 0.045708887, 0.05167484, 0.036699127, 0.044075888, 0.07544025, 0.005563494, 0.022931388, -0.021448877, 0.027738836, -0.06049568, 0.023898775, 0.00097041833, -0.030736338, 0.011460269, -0.06485867, -0.051330857, -0.02421889, -0.07106928, 0.066800945, 0.028246626, -0.00790841, -0.041564103, 0.016247021, 0.025421785, 0.01555347, 0.08140845, 0.0577104, 0.0088178655, 0.036845792, -0.03420963, 0.046915133, 0.054541215, -0.03477154, 0.002024032, -0.023456711, -0.0026599984, 0.00030727475, -0.04497442, -0.066424005, -0.0059845923, -0.013414577, -0.0066634766, -0.02254938, -0.025936583, 0.036816612, -0.07114239, -0.056953337, 0.014362161, 0.067963056, 0.05647313, -0.033586144, 0.053269226, -0.035377096, -0.075625084, -0.008647449, -0.006991434, -0.02161103, -0.023115618, -0.014669223, -0.035286196, 0.035241105, -0.010157574, 0.041964203, -0.024342932, -0.04491534, 0.01686072, 0.15007725, 0.017567854, -0.035057317, 0.04989487, -0.014410196, 0.079849645, -0.017984387, -0.037877683, -0.0055427905, -0.010605255, -0.00210061, -0.045535047, 0.026422907, 0.031879693, 0.030605959, -0.039241064, -0.0022882447, 0.034980163, -0.023993803, 0.020393644, -0.042346653, -0.0027872066, 0.034238987, 0.059073377, 0.017745376, -0.04757955, 0.008928198, -0.028489241, -0.07162072, 0.02280017, 0.047385976, 0.03564407, -0.024998993, 0.039792977, -0.016960151, 0.032625016, 0.0129018035, -0.015292085, 0.008901555, -0.02357029, 0.024863329, 0.057376962, 0.0350781, -0.0038111345, 0.039647583, 0.041311458, -0.012593854, 0.0018220166, 0.021582518, -0.021053622, -0.034413863, -0.006093655, 0.0035802536, -0.099609435, 0.06062294, -0.045883697, 0.015404698, 0.05195159, -0.0031022963, 0.03593992, -0.01619717, -0.0125057595, 0.008115051, -0.06305949, -0.028146092, -0.006884062, -0.014162648, -0.0024771597, 0.02552344, 0.025560796, -0.02124001, 0.043573078, 0.021116368, -0.020735782, 0.021645702, -0.0151948705, 0.024453921, -0.005332919, -0.020161852, 0.04281293, 0.053196747, 0.04405796, -0.04416026, -0.03456636, -0.014575961, -0.037296478, -0.0079966355, 0.029502595, -0.06808372, -0.008822236, -0.017506994, 0.016490726, -0.026405796, -0.026769735, 0.0039468133, -0.019438442, 0.032521147, 0.034848552, -0.003946603, -0.008732273, 0.0018336158, 0.021767413, -0.054527342, 0.015800785, 0.0014758749, -0.01063531, -0.05791201, 0.00052916515, -0.052595764, 0.018992908, -0.008620502, -0.024105137, -0.024837466, 0.07343456, 0.062475417, -0.019602142, 0.03071076, -0.021263797, -0.0110718, 0.021765262, 0.05769195, 0.045456357, 0.023844184, 0.024824353, -0.02713382, 0.0009197075, -0.008068059, -0.017499084, -0.012494596, 0.007510915, -0.03325832, -0.027686281, 0.05490669, -0.006310222, -0.047434274, -0.056527544, -0.0089846775, -0.013240663, -0.0010106497, 0.053647455, 0.034933154, -0.021958398, -0.035121836, 0.025348684, -0.031152863, -0.038679533, -0.02513186, 0.049870543, 0.020197157, 0.013573011, 0.053801503, -0.018113049, 0.0037997488, 0.012524442, 0.014127857, 0.055704948, 0.0063386154, 0.03573338, 0.022263717, -0.048880633, 0.05421723, -0.043142587, 0.008278142, -0.0018842363, -0.0019881167, 0.021565609, -0.004158469, -0.041573554, 0.027059488, 0.04140609, -0.04944458, 0.014455445, -0.010858066, 0.017114727, -0.03130681, -0.0067054317, -0.0057035675, 0.04610465, 0.02261927, 0.013902956, 0.0038330597, 0.026624646, 0.02378961, -0.0025881017, 0.0019414292, 0.08277258, 0.011877566, -0.020440238, 0.012699574, 0.0029269585, 0.035966042, 0.04744884, -0.045271445, 0.0128725795, 0.008546885, 0.010560749, -0.05012447, 0.023312261, -0.027402062, -0.040561896, -0.038486872, -0.0966242, 0.0051060393, -0.044217866, -0.022205105, 0.0027858939, -0.04664835, -0.041451372, 0.014975611, -0.015550401, 0.041514426, 0.0038345049, -0.029247422, -0.093997, -0.011456004, 0.034223843, -0.03410642, 0.041151408, 0.008716024, -0.02033994, -0.027159711, 0.0046082195, 0.009262975, 0.011146299, -0.0587786, 0.014949512, -0.010005044, -0.011555668, -0.022643434, 0.034462105, 0.014552569, -0.0060608005, 0.016013876, -0.008711371, -0.035508018, 0.03767841, 0.027342811, -0.0007955024, -0.018068457, 0.009145835, -0.046850394, -0.006373148, 0.030661652, -0.0870119, 0.01744904, 0.0067371367, -0.023716886, 0.03363879, -0.10733218, 0.053184997, -0.07844081, 0.002832561, -0.031800993, -0.0068189506, -0.033438288, -0.0050861645, 0.051835146, -0.026986623, 0.015037746, -0.02231085, -0.033744946, -0.07039597, -0.0739481, 0.007951557, -0.0237737, 0.042215582, 0.0069665783, 0.004247615, 0.05101054, -0.024597913, -0.04031547, 0.0038964679, -0.0060009854, -0.07562473, -0.02487762, -0.08801289, -0.013061932, -0.02354606, -0.0045180195, 0.018833924, -0.039785087, 0.027867293, 0.0123066055, -0.02491561, -0.022141404, -0.031045975, -0.061284263, -0.057623174, 0.024396464, -0.035052303, 0.02190675, 0.02861147, -0.02831549, 0.013814254, 0.03379243, 0.008799612, -0.008985111, 0.02473169, 0.035441443, -0.0065674633, -0.049922265, -0.01395163, -0.008170894, 0.097359784, -0.025037477, 0.009940462, 0.047850978, 0.009716014, -0.06050233, -0.0053205322, -0.004911557, 0.09569588, -0.039645426, 0.021967655, -0.031756643, -0.024276247, -0.03609301, -0.03808405, -0.028172335, 0.067122124, -0.031103345, -0.062894486, -0.007605858, -0.011416188, -0.07815174, -0.02522963, 0.034591857, -0.0029417695, 0.0035066295, -0.019837245, 0.06540605, -0.047672562, 0.0024494422, -0.010271298, -0.011683429, -0.013220007, 0.031526968, 0.026978439, -0.01317559, 0.034454472, 0.0036316493, 0.03858765, 0.03327432, 0.0067307693, 0.016706105, 0.039433118, -0.058149464, 0.051281277, -0.06060769, -0.050163772, 0.0073816217, 0.029024001, -0.029151313, -0.0023354492, 2.3504716e-05, -0.02803457, 0.020090759, 0.012836656, 0.010128475, -0.0498842, 0.017088287, 0.033801958, -0.0016850217, 0.06433099, 0.03772622, -0.051111512, -0.0136458855, 0.03284268, -0.03914711, -0.044828914, 0.029353814, 0.03176771, 0.04982787, -0.009347002, -0.0047025043, 0.0049502836, -0.018715525, 0.0034758367, -0.0348739, 0.030821221, -0.015568467, -0.011095636, 0.06839485, 0.017524634, 0.034052003, 0.01964667, 0.0144328615, 0.034035083, 0.0020167644, -0.014245227, 0.03581507, -0.022901969, -0.019622548, 0.037305646, 0.011413001, 0.020275563, -0.015900897, -0.024980197, -0.016915193, 0.014792825, -0.0043827705, 0.06033795, -0.027224954, 0.031051533, 0.0018879907, -0.0015919221, 0.022977872, -0.008529422, 0.029175201, -0.011882022, -0.0030052636, 0.008843563, -0.03773693, -0.018831575, 0.0026362718, 0.021863792, 0.008598345, -0.0010849979, -0.051589943, -0.0147834, -0.015793372, 0.027256852, -0.03887631, 0.048800655, -0.039819937, -0.015114874, -0.03089365, 0.08536702, 0.05948463, 0.03466869, 0.06610413, 0.017570777, -0.016509663, -0.089170516, 0.031086152, 0.011019665, -0.012326908, -0.023361519, 0.01575868, -0.061152715, 0.012428684, 0.03839507, -0.044189308, -0.025259307, 0.041219506, 0.022230746, -0.09707367, -0.051984686, -0.029335786, -0.05236734, -0.029908493, -0.01357844, -0.049437784, 0.033300143, 0.039269578, -0.02440647, 0.003969735, 0.041075632, 0.010139068, -0.012995733, -0.007494727, -0.028705698, 0.00082188204, -0.008809902, -0.018740565, -0.052104127, -0.056353454, -0.0031758966, 0.012661097, -0.028962532, 0.058633227, 0.030502062, -0.048844095, 0.006302846, -0.0108178435, -0.025131682, 0.017953945, -0.018075408, 0.018053927, -0.026429, -0.032170933, -0.004405795, 0.012295216, -0.023467956, 0.042460695, 0.023037596, -0.031674184, -0.036564704, -0.055931523, -0.019010633, -0.025046764, -0.0712555, 8.611861e-05, 0.0057757758, 0.026232066, 0.0092142075, 0.03525938, 0.022571806, 0.08190164, -0.0033449698, -0.021198032, -0.04860236, 0.013574752, -0.035698395, 0.016163062, -0.023340048, -0.014989142, 0.028393093, 0.006529506, 0.010815611, -0.032567035, -0.046195365, 0.032816473, 0.017748706, -0.02049762, -0.013504844, 0.02878078, -0.036764104, 0.075626776, 0.019785877, 0.020972997, 0.031728398, -0.083044425, -0.02931215, 0.032899506, -0.028159846, 0.03026393, -0.009694038, 0.0058308886, 0.08435889, -0.053855337, -0.0041955337, 0.0067178835, -0.000500954, 0.059708435, -0.03473651, 0.035806242, -0.07816992, -0.081534356, -0.081089124, 0.03987137, 0.02991362, 0.081208974, 0.011049659, -0.053723138, -0.00076049764, -0.0312624, 0.025069578, -0.04062, -0.025072401, 0.00048030837, 0.052829657, 0.02125865, 0.050059285, -0.06767218, -0.015226169, -0.013393508, 0.027979143, 0.046253514, -0.016436914, -0.007504613, 0.036668144, 0.01840988, 0.035528705, 0.04147602, -0.02025752, 0.022766791]\",\n          \"[0.027675966, -0.01612932, -0.01800864, 0.019673012, 0.08769466, 0.0014769429, 0.010704665, -0.005236023, 0.047188684, 0.03761532, -0.016372254, 0.015939767, 0.004009486, -0.04007521, 0.024605079, -0.03173427, 0.030920763, 0.03988214, 0.012887524, -0.03022114, -0.015708633, 0.059043355, -0.016023291, -0.0025308754, -0.04073864, -0.020692555, 0.016963478, -0.07814157, -0.022853358, 0.020579195, -0.03407056, -0.0009133024, -0.08117961, 0.019255063, 0.012193699, -0.06767274, 0.045964666, 0.024942322, 0.004203056, 0.025900425, -0.0016766512, -0.050967444, -0.0025331134, -0.0070740036, -0.017477605, -0.048568357, 0.032993488, 0.04355646, 0.026935793, -0.011673787, 0.02362909, 0.021656943, 0.0323811, -0.03568458, 0.016999958, -0.018094022, 0.057677917, -0.026483634, -0.06923171, -0.015768759, 0.048599586, -0.012578989, -0.0045933896, 0.117373705, -0.0022148765, 0.0087092025, -0.0121498285, 0.0010725158, 0.018069291, -0.029773567, -0.0065932665, -0.058149047, 0.012317347, -0.020933958, -0.0029607306, -0.071151935, -0.010031551, 0.050417494, 0.01571768, 0.05829994, -0.031246232, -0.059578426, -0.06458616, -0.06434521, -0.11007681, -0.0056985705, -0.043544326, -0.004529563, 0.026534904, 0.030224213, -0.006699872, -0.007103079, 0.052954294, -0.024562245, -0.03467211, 0.029829651, -0.02841984, -0.022974577, 0.0036460643, -0.027065475, 0.007957817, -0.024981046, -0.043634426, 0.004404129, 0.020623393, -0.005649733, -0.008119603, 0.037668515, 0.0076730195, 0.013393152, -0.07156598, -0.04496251, 0.0020098502, -0.011508041, 0.045349885, -0.02522553, -0.023734875, 0.08672422, 0.050680164, 0.0198079, -0.013141651, 0.0037596012, 0.04458242, -0.00033742396, -0.003432677, -0.04174845, -0.01704, 0.012852614, 0.07272834, 0.023587443, -0.0077364137, -0.033728167, 0.03521725, 0.026903296, 0.044284433, 0.05662702, 0.07743406, 0.017095689, 0.02821482, 0.08341511, -0.0010819075, 0.0060468814, -0.05681742, 0.050414428, -0.04712003, 0.042968903, -0.02288141, -0.03897936, 0.039459962, -0.0141917085, -0.018188039, 0.027760865, -0.037837904, 0.0067343274, 0.04386743, 0.003132913, 0.0075851004, 0.019935615, -0.020300878, 0.017186366, 0.050820228, 0.030662283, 0.009661271, -0.0046147867, -0.04283695, 0.017464038, 0.037063424, 0.028257443, 0.021280915, 0.0013056456, -0.012006613, 0.025307624, -0.05520984, -0.0548776, -0.0023381659, -0.006577864, -0.022175927, 0.01845564, -0.011816793, -0.025315449, -0.01844265, -0.058456443, 0.032645937, 0.090748034, 0.04877724, -0.043265507, 0.0295654, -0.053176194, -0.03486045, 0.03926745, -0.020162154, -0.029962305, -0.027866887, -0.00030181682, -0.024843324, 0.0048829764, 0.03379248, 0.0054697907, 0.03864054, -0.044570196, 0.020876372, 0.050190754, 0.036993105, -0.042230647, -0.005957735, -0.023794057, 0.07518761, 0.0016025587, -0.030024076, 0.022407368, -0.055284034, 0.0257843, -0.04810012, 0.02377809, 0.059912764, 0.019271413, -0.032413855, 0.025026409, -0.008705957, -0.042916957, -0.0059005506, -0.002629854, -0.065149724, 0.02793766, 0.018158302, 0.06561853, -0.07060635, 0.038004383, -0.0020515942, -0.06500418, 0.037001856, 0.053380176, 0.03387651, -0.0096498635, 0.065369576, -0.012048983, 0.05130614, 0.016552823, 0.0028370486, 0.0043916157, -0.016337922, 0.08983495, 0.034016266, -0.023891885, -0.039697934, -0.0058055203, -0.00906385, 0.032780714, 0.0009496314, 0.053801235, -0.00042002762, -0.05333777, 0.014142019, 0.0064763557, -0.021699158, 0.08151805, -0.07694629, -0.01921763, 0.019488262, 0.0072593256, 0.03883878, -0.0019574403, 0.03849201, -0.013261135, -0.059373863, -0.008145858, 0.007444049, -0.002457871, 0.032179423, -0.020000542, 0.015337558, 0.01255017, 0.009872871, 0.015436845, -0.026779529, 0.003436445, -0.054981563, 0.027686138, -0.0016216725, -0.013636503, 0.0113748815, 0.045526583, 0.032431882, -0.0319864, -0.010411737, -0.005455975, -0.03377873, -0.016305279, 0.05518679, -0.036521833, -0.0631332, -0.005139374, 0.019523894, 0.019637423, -0.06632776, -0.045619722, -0.058334578, 0.025116371, -0.015115836, -0.02673088, -0.0045423615, -0.009782015, 0.0240998, -0.09860343, 0.003611928, 0.05252091, 0.020025449, -0.06811288, 0.01391455, -0.031722445, 0.014957263, -0.015364046, -0.047692735, -0.022694254, 0.0760938, 0.04835445, -0.028068243, 0.041305497, -0.0054453714, 0.030571198, 0.012924156, 0.118531026, -0.004661583, 0.011725988, -0.0021956384, -0.026064696, -0.0024054935, 0.002144951, -0.026255423, 0.0064709187, -0.013892847, -0.03151195, 0.020829773, 0.017528903, 0.041837968, 0.016407095, -0.027098997, -0.021811577, -0.033093296, 0.013941682, 0.0143096065, 0.006511291, -0.03181643, 0.006894264, 0.009564878, -0.027546357, -0.01158202, 0.0069181626, 0.05081759, 0.040569328, -0.028530339, 0.056301963, -0.022616893, -0.0038847341, -0.014485847, 0.033814427, 0.077356376, -0.041799184, 0.0584242, -0.033250395, -0.01642551, 0.0330074, -0.012425451, -0.007753761, -0.030952455, 0.065939896, 0.04130442, -0.021447025, -0.0124002015, 0.0013733932, -0.0010912487, -0.01946465, 0.021435713, 0.0071981526, -0.015114469, 5.1663414e-05, -0.06416092, -0.03810816, 0.04617874, 0.030577064, -0.039076257, -0.05411576, 0.07140274, 0.053727534, 0.021613533, -0.010445244, 0.04294357, 0.03607126, 0.00045055617, 0.035061814, 0.020898245, 0.0400037, 0.10034637, 0.027788682, -0.03512738, -0.0134721445, 0.0003513701, -0.013834071, 0.009900359, -0.028441945, -0.008304218, -0.023436388, -0.048222836, -0.039695732, 0.016395189, -0.022153959, -0.02089958, -0.036257826, -0.041326817, -0.008058679, 0.04642291, -0.004465084, 0.008230223, -0.062921904, -0.044184145, 0.013146781, 0.08177235, 0.024453985, 0.016383596, 0.008152205, -0.012304891, -0.018541295, 0.014353672, -0.014510783, 0.018932883, -0.027113035, -0.0064370856, -0.06366259, -0.018246682, 0.020128, 0.06900221, 0.015200609, 0.024608895, 0.015775722, -0.01994665, -0.015818736, 0.037445914, -0.0034323533, -0.04521333, -0.001612955, -0.0050725294, -0.039193094, 0.035449997, -0.012086672, -0.08428125, -0.0088579785, -0.012092078, -0.08069083, 0.047093075, -0.05322072, -0.008609815, -0.069364436, -0.030420432, -0.03122492, -0.0030653144, -0.036007345, -0.008546834, 0.039641444, -0.016551128, 0.03993006, -0.031430162, -0.041737508, -0.026878018, -0.069476835, 0.014932759, -0.00014464739, 0.01760366, 0.01683364, -0.014240731, 0.0657493, 0.015695214, -0.042684376, -0.057617, -0.00467858, -0.039027512, 0.01491829, -0.06014583, -0.021504562, -0.07206856, -0.022239447, -0.0255402, -0.030811481, 0.04251652, 0.043125328, 0.0031627275, -0.0069473227, 0.004316198, -0.071415074, -0.010020968, 0.02281009, -0.021734204, 0.0003373096, -0.016529465, -0.03294286, -0.0272521, 0.017854195, 0.009275156, -0.03547088, 0.009734336, -0.03088642, -0.0015759157, -0.0012967673, -0.011490113, 0.0005814644, 0.060421813, -0.03301611, -0.01231995, 0.017018076, 0.0013539401, -0.005369835, 0.030433385, -0.025683973, 0.059653193, 0.011631123, 0.055976342, -0.016335404, -0.0386575, 0.01385507, 0.0007230891, -0.0151380515, 0.024919085, -0.06017463, -0.048220735, 0.005097666, 0.045513146, -0.01894805, 0.002825925, 0.0590752, -0.016258385, 2.7603073e-06, 0.010392405, 0.08111331, 0.00660095, 0.0104566, 0.03462871, -0.008173586, -0.015932271, 0.02203306, 0.014376814, -0.034793016, 0.0010091469, 0.009408765, 0.025122888, 0.037452765, -0.0065730573, 0.013123663, 0.010308766, -0.07098793, 0.03411925, -0.04683957, -0.013280506, -0.03233291, 0.030746462, -0.0229811, 0.06990299, 0.0113449115, -0.044929266, -0.038195364, -0.020347761, 0.014470902, 0.0054418365, -0.037563495, -0.013889957, -0.023238225, 0.07328361, 0.03168113, -0.025752222, -0.012130841, 0.053192914, -0.013078436, -0.02072352, 0.045382317, 0.04460789, -0.03828968, 0.0027211078, -0.06356088, 0.0061691534, -0.018233955, 0.0007499137, -0.023740232, 0.04439971, -0.022003299, 0.010365031, -0.009215394, 0.0040893084, 0.013858671, -0.034705628, -0.004722424, 0.055659197, 0.0123139, -0.054872423, 0.01825299, -0.027131774, -0.0294574, -0.018494865, -0.020046894, -0.0077307275, 0.0047810683, -0.011382611, -0.033190183, 0.032056194, -0.030049503, 0.047765687, -0.031619452, -0.008771251, -0.011424602, 0.017476402, 0.007484648, 0.0024974286, -0.004101797, -0.0030271013, -0.021823222, 0.02989468, -0.03326814, -0.027371842, 0.019614125, 0.058687408, 0.052148078, -0.03186921, -0.042316616, 0.021750579, -0.024660269, 0.07660149, 0.026324268, 0.0777513, 0.03646266, 0.020851387, -0.0315803, 0.032615405, 0.025321182, 0.060765926, 0.048275366, -0.0026019288, 0.025151078, -0.09037988, 0.009021032, -0.006359098, -0.005570726, -0.037879802, 0.021299742, -0.062342457, 0.01798802, 0.014602596, -0.054039486, -0.024831016, 0.083493255, -0.003513094, -0.09037449, -0.07484794, -0.05158382, -0.03678857, 0.019955486, -0.054251548, 0.024334233, 0.012189318, 0.013998879, -0.07653803, -0.001718273, 0.02270536, -0.008967865, -0.014876336, 0.0075326655, -0.07057929, -0.040501736, -0.014931589, -0.0061304853, -0.05611491, -0.0628631, -0.025042905, 0.016529433, -0.053267516, 0.035220414, 0.051314954, -0.019800032, -0.0187396, 0.03594137, -0.029316759, 0.029639842, -0.01992964, 0.035974585, -0.0053622224, -0.06312758, -0.010742655, 0.00526042, -0.039760027, 0.05622947, 0.031675894, -0.0077257953, -0.022595976, -0.05521128, 0.046031974, -0.00045437642, 0.0077672335, 0.034348994, 0.016287358, -0.010698653, 0.030355927, -0.043612383, -0.0066668135, 0.042104576, -0.025710344, 0.009196928, 0.033567633, 0.008937168, -0.035637718, -0.014567004, 0.012291415, 0.017134469, 0.03787628, 0.05196295, -0.00070549204, 0.0073756604, -0.06063891, 0.027032394, -0.01596697, -0.028449211, -0.00155747, 0.017781194, -0.06589172, 0.089242466, -0.0029324435, 0.014563134, 0.01385987, -0.08555971, -0.0352584, 0.0051131835, -0.04445287, 0.029864473, 0.010322693, -0.01683466, 0.071051225, -0.025775362, -0.01133975, -0.01596289, 0.0021871894, 0.06297361, -0.018191455, 0.01467534, -0.038454555, -0.07423649, -0.032458577, 0.009555706, -0.011337193, 0.02269034, 0.049823597, -0.035507333, -0.05329748, -0.060757328, -0.039041303, -0.00012414607, 0.047837537, 0.025653662, 0.029209865, 0.115555964, 0.02340641, -0.029865667, -0.025147354, -0.012347484, -0.00016333566, 0.009588136, -0.062415633, 0.0024092172, -0.017962312, 0.033762064, 0.010857769, -0.018301006, -0.012766848, -0.056348305]\",\n          \"[0.05334512, -0.03868564, -0.003815435, -0.027850023, 0.053773407, -0.0071435045, -0.0111352755, -0.026881963, -0.01871548, 0.041413337, 0.022343365, -0.023239233, -0.012897725, -0.011550138, 0.04171863, -0.01794159, 0.024748972, 0.020319102, -0.024958853, -0.026163878, -0.0034447275, 0.0443265, -0.034647644, -0.0304099, -0.015763383, -0.04701259, 0.013211924, -0.0859851, -0.018593837, 0.03989899, -0.05635889, 0.0076722833, -0.04759918, 0.027307916, -0.0002726291, -0.037822522, 0.03143109, -0.0016388495, -0.0030644727, 0.028814116, -0.0016515774, -0.021339208, -0.026085967, -0.035034984, 0.00885767, -0.019883707, 0.049804717, 0.051875707, 0.018189449, -0.054355755, 0.027847763, 0.014522491, 0.027856683, -0.040951136, 0.047992386, -0.043827225, 0.06755898, 0.017863216, -0.055008974, -0.0009697866, 0.029096825, -0.0025427376, -0.043893833, 0.09491934, 0.028452499, -0.012437704, 0.016564261, 0.005197711, 0.03717712, -0.003757467, 0.026775239, -0.025553681, 0.04741475, -0.041754063, -0.06477641, -0.029253524, -0.050278567, 0.027960503, 0.027428921, 0.0122253215, -0.020352153, -0.044482518, -0.03258776, -0.022380956, -0.077032484, 0.042114962, -0.014324117, 0.006950146, -0.0024551142, 0.043540474, -0.048193455, -0.046761446, 0.037963994, -0.040826615, -0.040466733, 0.025545632, -0.07005082, -0.010861434, 0.012878206, -0.021318419, 0.014157929, -0.037048455, -0.044304844, 0.016764566, -0.017363299, -0.014922313, 0.03220124, 0.032717615, -0.010233005, 0.07573268, -0.037230313, -0.044922333, -0.0036990158, 0.0071796356, 0.03589815, -0.010331555, -0.0388288, 0.008191538, 0.035142653, 0.023591157, 0.044057913, -0.0010384555, 0.022635907, 0.00015242462, 0.057561625, -0.015496639, -0.010376354, 0.0052072946, 0.057756096, 0.029053751, 0.01838159, -0.052449748, 0.0047794417, 0.029515006, 0.037543293, 0.05098097, 0.08702503, 0.035573408, 0.04176663, 0.071972124, -0.015004921, 0.023894034, -0.002637107, 0.061491117, -0.041956566, 0.042618055, -0.023593375, -0.032825354, 0.0024061704, -0.008718, -0.0011018572, -0.038745172, -0.049942303, 0.045215692, 0.08674108, -0.008502659, -0.009508976, 0.042957895, 0.018410604, -0.021588245, 0.06622194, 0.015338091, 0.009098114, 0.045558944, -0.04583623, 0.018795175, 0.0337645, -0.00131688, 0.002292315, 0.0024526683, 0.0042728833, 0.01907755, -0.040411614, -0.044386223, -0.015339377, -0.07895421, -0.027505782, -0.01355952, -0.06536835, 0.00048652396, -0.014855626, 0.0035582625, -0.012949567, 0.025742594, 0.04078109, -0.008620362, 0.016935024, -0.04468814, -0.036431212, 0.013336837, 0.012380788, -0.016363306, -0.039013725, 0.0069572837, -0.0071046595, 0.050747424, -0.002046442, 0.007529746, 0.040320273, -0.033236474, -0.0046072844, 0.0760783, 0.01565941, -0.025597537, -0.024123866, -0.029292993, 0.0660606, -0.050358463, -0.009716832, 0.038640767, -0.06321313, 0.030134978, -0.03052134, 0.060070433, 0.04815661, -0.029793883, 0.012571778, 0.024917984, 0.013314703, -0.049185816, 0.012817417, 0.0065044807, -0.026436996, 0.016474508, 0.022131866, 0.05499648, -0.095696665, 0.05598576, -0.00959332, -0.07994606, 0.025739187, 0.048553877, -0.012984153, -0.043573402, 0.03212413, -0.02367307, 0.018609053, 0.033829954, -0.00551221, 0.008401652, -0.03163106, 0.028799035, 0.056887113, -0.0077031003, -0.018231003, 0.025548527, 0.026314413, 0.023383649, -0.035253566, 0.039875757, -0.024191905, -0.06552958, 0.015145615, 0.020154895, -0.066362776, 0.07953172, -0.07545048, -0.01798337, 0.027549917, 0.005233899, 0.06268486, -0.044923913, 0.015584899, 0.02147083, -0.053774126, -0.0069668186, 0.011331592, -0.0430505, -0.0032039108, -0.013643068, 0.0096913325, -0.039961092, 0.054184962, -0.008979204, -0.036204856, 0.0037574323, -0.016705016, 0.039916243, -0.016381636, -0.08687614, 0.027957242, 0.04948789, 0.031943448, -0.057290174, -0.042277932, -0.023002712, -0.047017496, 0.006684452, 0.054534316, -0.056737285, -0.07498496, -0.009375836, 0.025543522, 0.03028308, -0.06906246, 0.005863897, 0.03279533, 0.023197096, 0.0640316, -0.010762583, -0.03148228, 0.0031338094, -0.0072938614, -0.06358541, -0.005270622, -0.008926155, 0.021963716, -0.05552044, 0.024500206, -0.0036044843, 0.016203098, -0.0019299133, -0.03012397, -0.011156799, 0.06323655, 0.03971083, -0.0037787058, 0.062443055, -0.0064758747, 0.027825642, -0.0058271047, 0.10660979, 0.0768696, -0.005721021, 0.0006469746, -0.0060702893, -0.0037615518, 0.024443692, 0.019890888, 0.0004614053, -0.055237398, -0.061259262, -0.013920842, 0.032681175, 0.013193363, 0.008091507, -0.05888119, 0.028916609, -0.024801744, 0.014784777, 0.043455012, 0.042146776, -0.053490814, -0.026390158, -0.012684587, -0.062528014, 0.0007469724, 0.009444067, 0.055342283, 0.004789, -0.009570944, 0.0647348, -0.05427646, -0.030443273, 0.004453014, -0.0065536685, 0.043011244, 0.007335343, 0.01579795, -0.015037961, -0.062222652, 0.083001934, -0.0071070213, -0.017438611, -0.023761323, 0.039175898, 0.013001254, -0.021472273, -0.03829355, 0.040560693, 0.03135187, -0.03742055, -0.0017571095, -0.031136084, 0.03912493, -0.023099659, -0.042291485, -0.06915903, 0.04400628, 0.06700761, -0.011770504, -0.043494806, 0.04672133, 0.05778405, -0.018912366, -0.022868197, 0.060825825, 0.016874006, 0.0073900563, -0.010002537, 0.021573996, 0.005962376, 0.0491491, 0.03449636, -0.021416446, -0.0072996067, -0.027963754, -0.02216488, -0.0016100897, 0.018953698, -0.01317025, -0.031108452, -0.07793239, -0.040982008, -0.0043924483, -0.020185677, 0.024924824, -0.041641675, -0.026849264, -0.015949076, -0.012861395, 0.017245725, 0.025614774, -0.049223013, -0.036123235, 1.6120146e-06, 0.07790485, 0.019067246, 0.0075618587, 0.04324853, 0.014127279, 0.013150057, 0.0051650223, -0.0032270255, 0.03348731, -0.014980418, 0.0034561425, -0.030796885, -0.009452268, -0.0145541215, 0.049650297, 0.009352835, 0.013921525, -0.006638107, -1.4916843e-05, -0.031857543, 0.048845977, 0.0021973464, -0.0017968399, 0.02209603, 0.02006871, -0.031193376, 0.020376863, 0.014560888, -0.07205752, 0.03282666, 0.0031717056, -0.03392489, 0.025016325, -0.10766173, -0.011725264, -0.07139651, 0.021297976, -0.03277813, -0.027867323, -0.028798854, 0.008917343, 0.07009347, -0.041110456, 0.042566214, -0.054028656, -0.011037139, -0.026996415, -0.07548647, 0.013021667, -0.011179112, -0.003935323, -0.027333036, -0.013578021, 0.064508006, -0.0028996565, -0.06760958, 0.026824463, 0.034613468, -0.012324174, 0.0002846172, -0.04743452, -0.029777672, -0.01504816, -0.0115172, 0.031418037, -0.03131142, 0.046704125, 0.066929944, 0.015085166, 0.0032888376, -0.021353824, -0.042654254, -0.034337036, -0.0053100474, -0.022187805, 0.0035262338, -0.031869933, -0.04224167, -0.011481201, 0.05600788, -0.036872935, -0.00388018, -0.007399795, 0.028899776, 0.021440739, -0.042942062, 0.0030954145, 0.043310046, 0.05675842, -0.06413164, 0.02868405, 0.052379712, -0.010950414, -0.0380795, 0.019054776, -0.04667921, 0.0032908218, 0.027224576, 0.051181495, 0.0003472255, -0.036479842, 0.0024089655, 0.0021863838, -0.038180567, 0.020836549, -0.03288323, -0.03984082, 0.010270869, 0.028481523, -0.1216333, 0.036443643, 0.047073785, -0.021171005, -0.019994492, -0.030081859, 0.040892594, -0.019698361, -0.0036367078, 0.009343664, -0.022612732, 0.032733306, 0.03982301, 0.020052863, -0.00945905, 0.020473236, 0.0006271707, 0.058954712, 0.04027679, 0.005659914, 0.0066413516, 0.009159549, -0.05970646, 0.018969906, -0.025617097, -0.026128853, 0.028940285, 0.020558901, -0.040809028, 0.054443367, -0.004874267, -0.015153521, -0.00024793134, 0.016840119, 0.040159546, 0.002155261, -0.0138193015, 0.02345569, 0.002177301, 0.106234066, 0.01276331, -0.085579954, -0.012877629, 0.046544965, 0.020417461, -0.030211953, 0.035001833, 0.0077106813, 0.01900397, 0.02703751, -0.053472187, -0.019086493, 0.00428958, -0.0069794697, -0.017369961, 0.030781267, 0.03551536, 0.0048415153, 0.008016774, 0.042204764, 0.01922613, 0.04775945, 0.007525864, 0.04958513, -0.016124144, -0.05221883, 0.040309303, -0.017692946, -0.006757297, 0.0021398389, -0.008799435, 0.030151503, -0.023093767, -0.023980128, -0.024815168, 0.040575135, -0.028407246, 0.06408012, -0.049343437, 0.004522241, 0.01135044, -0.0047875787, -0.0014327575, 0.002449477, 0.006380749, 0.012606505, -0.017175775, 0.013629724, -0.014124491, -0.0178965, -0.037766375, 0.0043482524, 0.022445064, -0.040581662, -0.07602456, 0.017128633, -0.030821191, 0.010021304, -0.006262188, 0.037981182, -0.018636422, -0.029575236, -0.06029288, 0.05234343, 0.031536553, 0.035213273, 0.0463015, 0.0036708014, 0.0052345223, -0.050606936, 0.008256714, 0.02625674, -0.009607635, -0.0486939, 0.001669477, -0.071560495, 0.007041467, 0.07489814, -0.035134487, -0.044674326, 0.05438347, 0.013408014, -0.08244932, -0.06348855, -0.039674517, -0.026404835, -0.014855903, 0.005471334, -0.02302797, 0.007746313, -0.024981523, -0.046705868, 0.015537092, 0.017301518, 0.013637719, -0.05366216, -0.040013168, -0.018202893, -0.021289667, 0.007867972, -0.014348681, -0.054169655, -0.048515085, -0.004302536, 0.023561344, -0.05479715, 0.028102312, 0.071422175, -0.058051806, 0.0022482222, 0.01792397, -0.022148492, 0.026408166, -0.024048848, 0.059825547, 0.002632954, -0.0495286, 0.0022784234, 0.038764212, 0.00040144072, 0.030310614, 0.057940416, -0.01508035, -0.055378407, -0.051107764, 0.0038468342, -0.003155755, -0.026685834, 0.053139184, 0.022516226, 0.008175126, 0.016566997, 0.007076917, 0.014594105, 0.031596467, -0.014664266, -0.014177987, 0.0023916138, 0.0011586244, -0.038934156, 0.0031808876, -0.017630463, 0.0031040858, 0.015885863, 0.01965553, 0.02711403, -0.012510712, -0.049734417, 0.043539256, 0.019309346, -0.0727483, 0.00092066504, 0.08422341, -0.036712494, 0.060770884, 0.045213927, -0.0071196854, 0.022853747, -0.08573728, -0.005934812, 0.036175787, -0.03282357, 0.0365851, -0.004212834, -0.04486637, 0.092557974, -0.013356924, -0.06595603, -0.0150398305, -0.025142767, 0.043250445, -0.021360701, 0.049494747, -0.05258313, -0.057783876, -0.058879178, 0.02602606, 0.014588093, 0.08601702, 0.007908378, -0.027793288, 0.013667886, -0.040338863, -0.016787011, -0.030427827, 0.009063525, 0.028942192, 0.025336813, -0.007511073, 0.045527868, -0.02742367, -0.024122508, -0.02945458, 0.022295559, 0.028236434, -0.02587762, 0.014016392, 0.044975262, 0.02490689, 0.008495326, 0.005227856, 0.017179709, 0.0007806002]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_column_titles(df):\n",
        "    \"\"\"\n",
        "    Extracts column titles from a Pandas DataFrame and returns them as a list.\n",
        "    \"\"\"\n",
        "    return list(df.columns)\n",
        "\n",
        "# Extract and print column titles for each DataFrame\n",
        "items_cols = extract_column_titles(items)\n",
        "\n",
        "print(\"\\nItems DataFrame Columns:\")\n",
        "items_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vzkaf6CeUIfr",
        "outputId": "edd07efa-f77f-410b-d544-b81adbba49bf"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Items DataFrame Columns:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Title',\n",
              " 'Author',\n",
              " 'ISBN Valid',\n",
              " 'Publisher',\n",
              " 'Subjects',\n",
              " 'book_id',\n",
              " 'ISBN',\n",
              " 'google_api_title',\n",
              " 'author_clean',\n",
              " 'embedded_title']"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5GeQ_ys3CeJa"
      },
      "source": [
        "\n",
        "#### Step 2: Check the Number of interactions, users and movies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LHDaQs3tCeJb",
        "outputId": "d48fb9fc-ebdc-48d8-8f2f-f8812b77ae73"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of users = 7838, \n",
            " Number of movies = 15291 \n",
            " Number of interactions = 87047\n"
          ]
        }
      ],
      "source": [
        "n_users = interactions.user_id.nunique()\n",
        "n_items = items.book_id.nunique()\n",
        "print(f'Number of users = {n_users}, \\n Number of movies = {n_items} \\n Number of interactions = {len(interactions)}')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n_items = items.book_id.nunique()\n",
        "print(f'Number of books = {n_items}')"
      ],
      "metadata": {
        "id": "J-RX3iodzW4n",
        "outputId": "c81fc8b7-a232-489a-a8ab-1713ae4a4017",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of books = 15291\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mQ02IWmrCeJb"
      },
      "source": [
        "\n",
        "#### Step 3: Split the Data into Training and Test Sets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "gd32QvvuZWac",
        "outputId": "077553b4-27df-44ce-d500-10ab18215ee6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       user_id  book_id     timestamp\n",
              "21035        0        0  1.680191e+09\n",
              "28842        0        1  1.680783e+09\n",
              "3958         0        2  1.680801e+09\n",
              "29592        0        3  1.683715e+09\n",
              "6371         0        3  1.683715e+09\n",
              "41220        0        4  1.686569e+09\n",
              "12217        0        5  1.687014e+09\n",
              "19703        0        6  1.687014e+09\n",
              "64522        0        7  1.687014e+09\n",
              "29380        0        8  1.687260e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6186658b-2d4c-4f57-aadd-f9d2e1546551\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>21035</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.680191e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28842</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.680783e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3958</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.680801e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29592</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6371</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41220</th>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1.686569e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12217</th>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1.687014e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19703</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1.687014e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64522</th>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1.687014e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29380</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>1.687260e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6186658b-2d4c-4f57-aadd-f9d2e1546551')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6186658b-2d4c-4f57-aadd-f9d2e1546551 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6186658b-2d4c-4f57-aadd-f9d2e1546551');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-51128377-8167-4872-b2ea-8f285f1eddb0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-51128377-8167-4872-b2ea-8f285f1eddb0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-51128377-8167-4872-b2ea-8f285f1eddb0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "interactions",
              "summary": "{\n  \"name\": \"interactions\",\n  \"rows\": 87047,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2266,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4441,\n        \"min\": 0,\n        \"max\": 15290,\n        \"num_unique_values\": 15109,\n        \"samples\": [\n          12344,\n          4093,\n          2388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14198285.151551325,\n        \"min\": 1672663643.0,\n        \"max\": 1728925054.0,\n        \"num_unique_values\": 86768,\n        \"samples\": [\n          1699375376.0,\n          1718029733.0,\n          1711876194.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# let's first sort the interactions by user and time stamp\n",
        "interactions = interactions.sort_values([\"user_id\", \"timestamp\"])\n",
        "interactions.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "_nG-g8CoZuFM",
        "outputId": "d8a12165-eb24-4f08-cbb0-62a2e2887112"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  book_id     timestamp  pct_rank\n",
              "0        0        0  1.680191e+09      0.04\n",
              "1        0        1  1.680783e+09      0.08\n",
              "2        0        2  1.680801e+09      0.12\n",
              "3        0        3  1.683715e+09      0.16\n",
              "4        0        3  1.683715e+09      0.20\n",
              "5        0        4  1.686569e+09      0.24\n",
              "6        0        5  1.687014e+09      0.28\n",
              "7        0        6  1.687014e+09      0.32\n",
              "8        0        7  1.687014e+09      0.36\n",
              "9        0        8  1.687260e+09      0.40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66781f77-168d-4972-89c7-393ccff380e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>book_id</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>pct_rank</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.680191e+09</td>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.680783e+09</td>\n",
              "      <td>0.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.680801e+09</td>\n",
              "      <td>0.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "      <td>0.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.683715e+09</td>\n",
              "      <td>0.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1.686569e+09</td>\n",
              "      <td>0.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1.687014e+09</td>\n",
              "      <td>0.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1.687014e+09</td>\n",
              "      <td>0.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1.687014e+09</td>\n",
              "      <td>0.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>1.687260e+09</td>\n",
              "      <td>0.40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66781f77-168d-4972-89c7-393ccff380e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66781f77-168d-4972-89c7-393ccff380e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66781f77-168d-4972-89c7-393ccff380e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6edaeb0e-30b0-4a89-a701-4edbb3f4202b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6edaeb0e-30b0-4a89-a701-4edbb3f4202b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6edaeb0e-30b0-4a89-a701-4edbb3f4202b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "interactions",
              "summary": "{\n  \"name\": \"interactions\",\n  \"rows\": 87047,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2266,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4441,\n        \"min\": 0,\n        \"max\": 15290,\n        \"num_unique_values\": 15109,\n        \"samples\": [\n          12344,\n          4093,\n          2388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14198285.151551325,\n        \"min\": 1672663643.0,\n        \"max\": 1728925054.0,\n        \"num_unique_values\": 86768,\n        \"samples\": [\n          1699375376.0,\n          1718029733.0,\n          1711876194.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pct_rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29010488163459014,\n        \"min\": 0.0025974025974025974,\n        \"max\": 1.0,\n        \"num_unique_values\": 6116,\n        \"samples\": [\n          0.05042016806722689,\n          0.8811188811188811,\n          0.794392523364486\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "interactions[\"pct_rank\"] = interactions.groupby(\"user_id\")[\"timestamp\"].rank(pct=True, method='dense')\n",
        "interactions.reset_index(inplace=True, drop=True)\n",
        "interactions.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8JaLSrKya5P6"
      },
      "source": [
        "Now all remains to do is to pick the first 80% of the interactions of each user in the training set and the rest in the test set. We can do so using the `pct_rank` column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "keedrU6da4Kd"
      },
      "outputs": [],
      "source": [
        "train_data = interactions[interactions[\"pct_rank\"] < 0.8]\n",
        "test_data = interactions[interactions[\"pct_rank\"] >= 0.8]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P68b_ijzCeJb",
        "outputId": "dd6348c3-7660-46e4-eb68-95a35f50f4c9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set size: 65419\n",
            "Testing set size: 21628\n"
          ]
        }
      ],
      "source": [
        "print(\"Training set size:\", train_data.shape[0])\n",
        "print(\"Testing set size:\", test_data.shape[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0qX6z1MoCeJb"
      },
      "source": [
        "## Task 2: Creating User-Item Matrices for Implicit Feedback\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nv7ZMDzNCeJc",
        "outputId": "57fc6998-5cd1-4448-eeab-6b5a69b36638"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of users = 7838 | number of movies = 15291\n"
          ]
        }
      ],
      "source": [
        "print('number of users =', n_users, '| number of movies =', n_items)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G4WD0VpYCeJc"
      },
      "source": [
        "#### Step 1: Define the Function to Create the Data Matrix\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "3hk-nUZgCeJc"
      },
      "outputs": [],
      "source": [
        "# Define a function to create the data matrix\n",
        "def create_data_matrix(data, n_users, n_items):\n",
        "    \"\"\"\n",
        "    This function returns a numpy matrix with shape (n_users, n_items).\n",
        "    Each entry is a binary value indicating positive interaction.\n",
        "    \"\"\"\n",
        "    data_matrix = np.zeros((n_users, n_items))\n",
        "    data_matrix[data[\"user_id\"].values, data[\"book_id\"].values] = 1\n",
        "    return data_matrix"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EnvgOARgCeJc"
      },
      "source": [
        "#### Step 2: Create the Training and Testing Matrices\n",
        "\n",
        "Now we can use the function to create matrices for both the training and testing data. Each cell in the matrix will show a 1 if there was a positive interaction in the training or testing data, and a 0 otherwise."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFQ62rQWCeJc",
        "outputId": "843b272c-b2c7-4ffe-b0e5-b0aceeaa347d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train_data_matrix\n",
            "[[1. 1. 1. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]]\n",
            "number of non-zero values:  49689.0\n",
            "test_data_matrix\n",
            "[[0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]]\n",
            "number of non-zero values:  19409.0\n"
          ]
        }
      ],
      "source": [
        "# Create the training and testing matrices\n",
        "train_data_matrix = create_data_matrix(train_data, n_users, n_items)\n",
        "test_data_matrix = create_data_matrix(test_data, n_users, n_items)\n",
        "\n",
        "# Display the matrices to understand their structure\n",
        "print('train_data_matrix')\n",
        "print(train_data_matrix)\n",
        "print(\"number of non-zero values: \", np.sum(train_data_matrix))\n",
        "print('test_data_matrix')\n",
        "print(test_data_matrix)\n",
        "print(\"number of non-zero values: \", np.sum(test_data_matrix))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#give the dimensions of matrices\n",
        "\n",
        "print(\"Train data matrix dimensions:\", train_data_matrix.shape)\n",
        "print(\"Test data matrix dimensions:\", test_data_matrix.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9x2mjoA_tFG4",
        "outputId": "0eaef3f1-d691-491c-ec0e-303da8dda6d3"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train data matrix dimensions: (7838, 15291)\n",
            "Test data matrix dimensions: (7838, 15291)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UCt8PmpXCeJd"
      },
      "source": [
        "#### Step 3: Visualize the User-Item Interaction Matrices\n",
        "\n",
        "To better understand the distribution of  interactions, we’ll use a **heatmap** to visualize a subset of each user-item matrix. In the heatmap:\n",
        "- Rows represent users, and columns represent items.\n",
        "- Each cell shows whether there’s a positive interaction (`1`) or no interaction (`0`).\n",
        "- A color gradient makes it easy to spot clusters of interactions.\n",
        "\n",
        "We’ll visualize only a small portion of the interaction matrices (e.g., 50x50) to keep the display manageable."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Q1L9p0NcCeJd",
        "outputId": "c009bbc1-a4ed-4ff3-a124-98ee1e389229"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Function to plot a heatmap for a subset of the user-item matrix\n",
        "def plot_interaction_heatmap(data_matrix, title, num_users=200, num_items=200):\n",
        "    \"\"\"\n",
        "    Plots a heatmap of a subset of the user-item interaction matrix.\n",
        "    Parameters:\n",
        "        data_matrix: The matrix to visualize.\n",
        "        title: The title of the plot.\n",
        "        num_users: The number of users to display (rows).\n",
        "        num_items: The number of items to display (columns).\n",
        "    \"\"\"\n",
        "    # Extract a subset of the matrix for visualization purposes\n",
        "    matrix_subset = data_matrix[:num_users, :num_items]\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(matrix_subset, cmap=\"YlGnBu\", cbar=True, cbar_kws={'label': 'Interaction (1 = Positive, 0 = None)'})\n",
        "    plt.xlabel('Item ID')\n",
        "    plt.ylabel('User ID')\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Visualize a subset of the training and testing matrices\n",
        "plot_interaction_heatmap(train_data_matrix, 'User-Item Interaction Matrix (Train Data)')\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oscd4UZoCeJd"
      },
      "source": [
        "## Task 3: Item-to-Item Collaborative Filtering with Implicit Feedback\n",
        "\n",
        "Now that we’ve prepared our data, our next task is to create a recommender system using **Item-to-Item Collaborative Filtering**. In this context, the recommendation translates to “Users who liked this item (movie) also liked …”.\n",
        "\n",
        "Since we’re working with implicit feedback, the prediction formula will focus on the **likelihood of positive interactions** rather than ratings. This will predict items the user may interact with based on similarities to items they’ve previously liked."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vGqXN7n1CeJd"
      },
      "source": [
        "The following formula shows how to compute the likelihood of interaction between a user $u$ and item $i$ using item-to-item colaborative filtering."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0CAmSG5CCeJe"
      },
      "source": [
        "\\begin{equation}\n",
        "{p}_{u}(i) =  \\frac{\\sum\\limits_{i' \\in I} \\text{sim}(i, i') \\cdot {R}_{u}(i')}{\\sum\\limits_{i' \\in I} \\text{sim}(i, i')}\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r0ZK_p8tOBSP"
      },
      "source": [
        "In the above formula:\n",
        "\n",
        "\n",
        "*   $P_u(i)$ is the likelihood of user $u$ interacting with item $i$. This is the value we want to compute.\n",
        "*   $\\text{sim}(i, i')$ is the cosine similarity between items $i$ and $i'$.\n",
        "*   $R_u(i')$ is one if user $u$ has already interacted with item $i'$. Otherwise it is zero.\n",
        "*   $I$ is the set of all items in the dataset.\n",
        "\n",
        "The value $P_u(i)$ is expected to be between 0 and 1.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iYOQFOCDCeJe"
      },
      "source": [
        "#### Step 1: Compute Item Similarity Matrix\n",
        "\n",
        "As a first step, we’ll calculate the pairwise similarity matrix between all items using **cosine similarity**. This matrix will show how similar each item is to every other item based on the interaction patterns of users. The output will be an `n_items` by `n_items` symmetric 2D numpy matrix."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### TF-IDF"
      ],
      "metadata": {
        "id": "6lhSv9r6IZtE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TF-IDF\n",
        "\n",
        "# STEP 1: Build and clean the combined text feature\n",
        "text_fields = ['Title', 'Author', 'Publisher', 'Subjects', 'google_api_title', 'author_clean']\n",
        "items['combined_text'] = items[text_fields].fillna('').agg(' '.join, axis=1)\n",
        "\n",
        "# STEP 2: Align items with those used in the train_data_matrix (e.g., by book_id)\n",
        "# to ensure the order of books in the TF-IDF matrix exactly matches the item columns in the collaborative filtering matrix, so similarity scores align correctly with item IDs.\n",
        "items_ordered = items.set_index('book_id').loc[range(train_data_matrix.shape[1])]\n",
        "\n",
        "# STEP 3: Compute TF-IDF matrix and cosine similarity\n",
        "tfidf = TfidfVectorizer(stop_words='english', max_features=1000)\n",
        "tfidf_matrix = tfidf.fit_transform(items_ordered['combined_text'])\n",
        "\n",
        "# Cosine similarity between item vectors\n",
        "tfidf_sim = cosine_similarity(tfidf_matrix)\n",
        "\n",
        "# Normalize similarity matrix (optional for numerical stability or hybrid weighting)\n",
        "tfidf_sim = normalize(tfidf_sim)\n"
      ],
      "metadata": {
        "id": "WkUW6J2bDWzR"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "148f7047-01dd-49c5-fcdf-7a9afd4601f2",
        "id": "Qyaqca9iGrQg"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[5.23488944e-03 4.82388634e-03 2.74275719e-03 ... 0.00000000e+00\n",
            "  1.11745919e-03 9.01266134e-04]\n",
            " [0.00000000e+00 2.15339098e-04 9.08230503e-04 ... 0.00000000e+00\n",
            "  2.15444597e-03 3.51545151e-04]\n",
            " [3.09071426e-03 1.27620157e-03 2.24370357e-03 ... 3.00673094e-02\n",
            "  3.63741569e-02 1.59236900e-03]\n",
            " ...\n",
            " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 5.04838085e-03\n",
            "  1.71039333e-03 0.00000000e+00]\n",
            " [0.00000000e+00 2.56354946e-05 6.77503986e-05 ... 3.97796592e-03\n",
            "  2.01688041e-03 5.05305780e-05]\n",
            " [0.00000000e+00 9.08243283e-05 1.15114916e-04 ... 0.00000000e+00\n",
            "  9.47675360e-04 2.32244342e-04]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Define the function to predict interactions based on item similarity\n",
        "def item_based_predict(interactions, similarity, epsilon=1e-9):\n",
        "    \"\"\"\n",
        "    Predicts user-item interactions based on item-item similarity.\n",
        "    Parameters:\n",
        "        interactions (numpy array): The user-item interaction matrix.\n",
        "        similarity (numpy array): The item-item similarity matrix.\n",
        "        epsilon (float): Small constant added to the denominator to avoid division by zero.\n",
        "    Returns:\n",
        "        numpy array: The predicted interaction scores for each user-item pair.\n",
        "    \"\"\"\n",
        "    # np.dot does the matrix multiplication. Here we are calculating the\n",
        "    # weighted sum of interactions based on item similarity\n",
        "    pred = similarity.dot(interactions.T) / (similarity.sum(axis=1)[:, np.newaxis] + epsilon)\n",
        "    return pred.T  # Transpose to get users as rows and items as columns\n",
        "\n",
        "# Calculate the item-based predictions for positive interactions\n",
        "item_tfidf_prediction = item_based_predict(train_data_matrix, tfidf_sim)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_tfidf_prediction)\n",
        "print(item_tfidf_prediction.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#recommendation frame generation\n",
        "def create_recommendation_table(user_predictions, top_n=10, separator=\" \"):\n",
        "    \"\"\"\n",
        "    Creates a table of top-N recommendations for each user.\n",
        "\n",
        "    Args:\n",
        "        user_predictions (numpy.ndarray): Rows = users, columns = items. Predicted scores.\n",
        "        top_n (int): Number of top recommendations per user.\n",
        "        separator (str): Delimiter to join recommended book IDs.\n",
        "\n",
        "    Returns:\n",
        "        pandas.DataFrame: Columns = ['user_id', 'recommendation'].\n",
        "    \"\"\"\n",
        "    recommendations = []\n",
        "    num_users = user_predictions.shape[0]\n",
        "\n",
        "    for user_id in range(num_users):\n",
        "        top_items = np.argsort(user_predictions[user_id, :])[-top_n:][::-1]\n",
        "        recommendations.append({\n",
        "            'user_id': user_id,\n",
        "            'recommendation': separator.join(map(str, top_items))\n",
        "        })\n",
        "\n",
        "    return pd.DataFrame(recommendations)\n",
        "\n",
        "# Example usage with space-separated book_ids\n",
        "item_tfidf_recommendations_df = create_recommendation_table(item_tfidf_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "item_tfidf_recommendations_df.to_csv('item_tfidf_recommendations.csv', index=False)\n",
        "\n",
        "print(\"\\nItem-based Recommendations:\")\n",
        "display(item_tfidf_recommendations_df)"
      ],
      "metadata": {
        "outputId": "71ef4370-bb35-451c-828c-5771c3f739b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "2Buenjv5H62A"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Item-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0  15060 2395 16 4512 13261 19 13048 11659 2096 1...\n",
              "1           1  8656 13478 10787 14409 11482 13477 8913 820 95...\n",
              "2           2  9154 14851 9097 3511 15226 5508 11444 11185 44...\n",
              "3           3  4471 10806 123 3837 5220 9701 3834 14997 2963 ...\n",
              "4           4  14274 467 14099 7698 4284 500 8567 7603 2415 1...\n",
              "...       ...                                                ...\n",
              "7833     7833  2750 6107 2121 14232 431 14142 14525 975 12105...\n",
              "7834     7834  7311 12753 12387 8241 10596 13952 14826 1675 8...\n",
              "7835     7835  7429 10297 11482 9442 1830 6911 1032 14898 130...\n",
              "7836     7836  5702 10308 11905 7399 101 2031 10651 14876 111...\n",
              "7837     7837  14636 15069 7309 3253 9474 14232 8067 696 1065...\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-615c2c2a-734c-44e6-90b6-0ac8f410bf6c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>15060 2395 16 4512 13261 19 13048 11659 2096 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>8656 13478 10787 14409 11482 13477 8913 820 95...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>9154 14851 9097 3511 15226 5508 11444 11185 44...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>4471 10806 123 3837 5220 9701 3834 14997 2963 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>14274 467 14099 7698 4284 500 8567 7603 2415 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>2750 6107 2121 14232 431 14142 14525 975 12105...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>7311 12753 12387 8241 10596 13952 14826 1675 8...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>7429 10297 11482 9442 1830 6911 1032 14898 130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>5702 10308 11905 7399 101 2031 10651 14876 111...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>14636 15069 7309 3253 9474 14232 8067 696 1065...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-615c2c2a-734c-44e6-90b6-0ac8f410bf6c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-615c2c2a-734c-44e6-90b6-0ac8f410bf6c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-615c2c2a-734c-44e6-90b6-0ac8f410bf6c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-55db9be8-3e80-4389-a1cf-703daa2162b4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55db9be8-3e80-4389-a1cf-703daa2162b4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-55db9be8-3e80-4389-a1cf-703daa2162b4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_94875612-b746-4ef8-9bae-7481d82e1adf\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('item_tfidf_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_94875612-b746-4ef8-9bae-7481d82e1adf button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('item_tfidf_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "item_tfidf_recommendations_df",
              "summary": "{\n  \"name\": \"item_tfidf_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7458,\n        \"samples\": [\n          \"3054 3935 10417 9730 1512 6469 2171 210 1254 6017\",\n          \"6125 4441 7717 14285 13403 9597 11260 11868 3306 9446\",\n          \"7823 13239 13495 7435 6045 9169 7680 13570 2562 9701\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Google API similarity"
      ],
      "metadata": {
        "id": "m5XWMbRDIkno"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute the item-item similarity matrix w. embeddings\n",
        "\n",
        "user_similarity = cosine_similarity(train_embedding_matrix)\n",
        "print(\"User-User Similarity Matrix:\")\n",
        "print(user_similarity)\n",
        "\n",
        "items_ordered = items.set_index('book_id').loc[range(train_data_matrix.shape[1])]\n",
        "\n",
        "# Check the shape as a sanity check\n",
        "print(\"Shape of User Similarity Matrix:\", user_similarity.shape)"
      ],
      "metadata": {
        "id": "cpKcTrYvIwp4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### BERT Similarity"
      ],
      "metadata": {
        "id": "s421o1vwIpQL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 1: Combine text features\n",
        "text_fields = ['Title', 'Author', 'Publisher', 'Subjects', 'google_api_title', 'author_clean']\n",
        "items['combined_text'] = items[text_fields].fillna('').agg(' '.join, axis=1)\n",
        "\n",
        "# STEP 2: Align with train_data_matrix\n",
        "items_ordered = items.set_index('book_id').loc[range(train_data_matrix.shape[1])]\n",
        "\n",
        "# STEP 3: Load BERT model\n",
        "model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "\n",
        "# STEP 4: Encode book texts into embeddings\n",
        "bert_embeddings = model.encode(items_ordered['combined_text'].tolist(), show_progress_bar=True)\n",
        "\n",
        "# STEP 5: Compute cosine similarity\n",
        "bert_sim = cosine_similarity(bert_embeddings)\n",
        "\n",
        "# STEP 6: Normalize (optional)\n",
        "bert_sim = normalize(bert_sim)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 525,
          "referenced_widgets": [
            "80582eaecdd84ac493b192281eb09683",
            "690c5708bc254687b9035e69f51c7674",
            "72fa8f739b2f4625bf4d59a15eafb09d",
            "1d570ae3f8c3407291df6882c4876413",
            "d914f5d287ac447ea97c08c0c60702a6",
            "647a4e383a0f4103870822b9cc7dc727",
            "1226d72182db43839a1e1bb07aeecf8f",
            "27a171adc0e2446c824369971de1b0c4",
            "c3972c5bfa7a46f48482725c37a8bcc1",
            "38e3db90025f4816947bfcacd5892a72",
            "a8534146fc3244c7a4bd01182afa5544",
            "9a8dfe62308b4c25b951248661b1f9db",
            "a0fff45d96d04e018302875a16d47cc3",
            "a267eb4fa3c143fc978a7f1e57f3d7c5",
            "110b9bffed884df19b50a74711b98ea4",
            "4cd07dbf90744d6ebe496ffc6a660f90",
            "bfcd3a0f9ca941a298c8e56faa1b3d24",
            "45daf5efa99841cda496f2edeb8a5222",
            "5e78bd51156a4ad08f5299d9f4422786",
            "c5f7c9af29a54074af31c3cacd778f7b",
            "54ff39c4371c4f7e8934e1860dd7cf48",
            "c7e8065508e0491fba7fffa313fdfd36",
            "d9e8c12c6f1e4800840af3e487f145f2",
            "77b94f09020f44ba97a217c79e962987",
            "e3fcb48b87294d9b9c825eb24fbd5be8",
            "ed34967d6cf54298b12f0a9edbd68588",
            "6bda7911377b4e5aa25fa70d99c0b513",
            "74b1deda12134d4499f14111545863af",
            "0b9b7802f2014949b1b1dd96a3a8b663",
            "37056e355c844fa7a4d3c7aa293025de",
            "26f0a288da514ca9861b098b841a8fc2",
            "4663751ace844cd5903b670487877bfa",
            "9793c649dbc14cfea84e0f7296508db1",
            "ae0faf00428c4f3b8efd0b2679edf87c",
            "4d6fb6c2d33748919d78992cdb637ef8",
            "868852d80f714179bb5b864da05d7ed0",
            "37eb6d3eb84b46f1bed9389a5b90d137",
            "416b20820d8b4ca7aa6e2b6808383aad",
            "b6d7d468f4434a34808549c3a4a9da36",
            "e6a6cd9c18884ef2b34dcde8a3c6da62",
            "ebea1a5da6f4462fa40cff814113b985",
            "6f2ad0fc1d6546f29246e0392d24d8ae",
            "f567d1217df949baa4d529ceefea7cb9",
            "6555efa59b3c4c93a1e7bc3210948326",
            "fc76293d0adf4fe1b18a05bd83704bdc",
            "288041a6224940c88fdf0867a97c8568",
            "feebad18e2de4afbba1622df2b3828f7",
            "95d6a94657324e20acd2da06392a7a47",
            "f2bc1a1376df4666899bd108e7316baa",
            "3b4da162774b4229b0fe876d41041c98",
            "f460d6f1d985473ca52d55b36f3e8d71",
            "afe75a88bb6f4fbebd2cc0de3f11c62a",
            "3ca3ff5669bf4043aff257ab459128f1",
            "408bcf3f10174f1abcc54ec310e08ca2",
            "b5dccb80babc44fcb1f0f340059dded3",
            "8608d65011be4e4ba6fe6084f063e5e8",
            "8c2f74f7a8bd4ff283a888ba794a8d9e",
            "4ed5d4d6cf5b40148902e49eb57d9a38",
            "f671db28cb6a42dda64820bd951a1609",
            "a5c7101972614e339808a1a309a492c8",
            "a0ed19655b594818b1deaa9ef86c7020",
            "354481e71b564e70a4df48209d6a12dd",
            "28a84e3f94554460ad413a9b32cc2372",
            "464016e901114d90bb889c064af8365f",
            "ec044ffdb4f641db8b9c3285dec8df8c",
            "0b396e220b854d029d367b90d12ba347",
            "726db639e12b4307a490c72d617e0586",
            "6656997bf69840fca4c4bb81ccacceb1",
            "4b46620334d242adb8a0a5178621c72c",
            "624c59c88660421795e5789103822a6c",
            "42560c93481347fbad1914c2d77aaf86",
            "4aa3f091d39547cc94234dac77738da6",
            "160e0971318c4084b793aabffae8ee3d",
            "6f44fe209d3f43a891ae84961846d354",
            "7b467665dfc84923a7e6ab4f0663a601",
            "9433aca448ea490387d150f20e6a0078",
            "cac302847f0b4636944e1a932696d2d6",
            "d9dbd0a850ba4cfbb927e0b68c22d391",
            "3294b148088e40308fcdbad3b0f7b66e",
            "f2c336e8baa4489795d3ed3b9ef213c0",
            "13a3faa8718e4907adb8bec8463b517e",
            "c146f15a1c5c42e9996c11aa294de384",
            "d5e473b843a94b6a8d4899fde0980931",
            "c30ed87f20d74af6b1dbfb082a7941de",
            "d958415570ff49a6aa9a4a9d35a5e2ad",
            "e13ed4b8b6964221a1b0029976fbf0f1",
            "9d34e425f26f4306892453d23df702d7",
            "1901c1804cd649df866b85809bc40091",
            "7b82f59eae234b95ab22ce5d7ffbabe1",
            "9a4fa0ea1f4d45969ac5b6231afaf5ac",
            "290511ac52284812a326eca6a2a7b51a",
            "bb37e92b8d4c470789da3d5341f7acbe",
            "de3dbaf51fa24e7fab5abf8fc3f65d34",
            "79dbbe73e605494091cab5f5efaab160",
            "8259857e855e4e0ea1bfb3dafd2f2b8c",
            "5f11c3894b244385b8a854f48b44ca44",
            "6ea0673f94564548be20c05ff37d9713",
            "9aefeb1c378748be8763b396ffa11f35",
            "55dad54059e849d5b9d84b19b214c6d4",
            "91fcff9119a54427bbf27cbbbd04fb49",
            "74b487dea1c641d4960305b3713ee4af",
            "ede29c588473419981f11918935be3ef",
            "b79c2542635e40be8e36ca91067f5b8b",
            "79543c36606e48b088e1cf524273c21a",
            "2e0e26f1902843c4ad6caacf79987b42",
            "ba7f9974513f4c418112c7b9670428ea",
            "479b341910994c2cbdc5cec011382c07",
            "287b7f7dafc74f34bcc8be7b00fc18ae",
            "d99309a72b87447fa08a330686e0f027",
            "ed609b7c36c44dcfa28f9230092209f2",
            "31cf2d27e5b444ffa44e0b70381b9740",
            "7ea89d6db93b4b1789ec480fbdafb784",
            "ad1cf73f3c134996bd24b26310cbfbf3",
            "f08ded6b9e004dc49f7e08f3ea697826",
            "e51bed7e7cb649ec9379941a9b13ee18",
            "e39bbaa9fee74358a6f61c171f16d6ca",
            "5901d035a55f441dbd64f93c488975a4",
            "23b2238329f546578e7992e87213fe04",
            "f1464b347f9f421aabeb442ed15a9d74",
            "c0da2728ff7346f0b67203f9d0c5af3b",
            "03324403c9c641be83c77011e3293e4d",
            "37c515211ad74fffbdca82123ff751d0",
            "d08423288bbe45b6b2252164aab63035",
            "a23b4ce24feb41e6ab011da8a9414d6d",
            "6b911464e91d430a996cfc214948b26f",
            "5d93c2811ad742a7aab55c1f2159106f",
            "982c33ae80434faca827a64e8e7edce7",
            "051b023408404213af1f502d3314cb56",
            "5a116f5960654fe7b2e42aa6f6ff696a",
            "8c39f73f070c4617b5a3d360675214c8",
            "143688edd61b43e29a9e0c2ffc2fca4a",
            "e9ba6fd2c271428bb6533d57e7205ddb"
          ]
        },
        "id": "BKuhs4IUIjeT",
        "outputId": "a7ce1071-8cb5-43bb-8900-cdc6276bf5ac"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "80582eaecdd84ac493b192281eb09683"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9a8dfe62308b4c25b951248661b1f9db"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "README.md:   0%|          | 0.00/10.5k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d9e8c12c6f1e4800840af3e487f145f2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ae0faf00428c4f3b8efd0b2679edf87c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fc76293d0adf4fe1b18a05bd83704bdc"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8608d65011be4e4ba6fe6084f063e5e8"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "726db639e12b4307a490c72d617e0586"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d9dbd0a850ba4cfbb927e0b68c22d391"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7b82f59eae234b95ab22ce5d7ffbabe1"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "91fcff9119a54427bbf27cbbbd04fb49"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "31cf2d27e5b444ffa44e0b70381b9740"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches:   0%|          | 0/478 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "37c515211ad74fffbdca82123ff751d0"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ff87815-f3d8-4bb5-8ec2-d05232b180fa",
        "id": "9NgkTkuVJ_hx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[5.23488944e-03 4.82388634e-03 2.74275719e-03 ... 0.00000000e+00\n",
            "  1.11745919e-03 9.01266134e-04]\n",
            " [0.00000000e+00 2.15339098e-04 9.08230503e-04 ... 0.00000000e+00\n",
            "  2.15444597e-03 3.51545151e-04]\n",
            " [3.09071426e-03 1.27620157e-03 2.24370357e-03 ... 3.00673094e-02\n",
            "  3.63741569e-02 1.59236900e-03]\n",
            " ...\n",
            " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 5.04838085e-03\n",
            "  1.71039333e-03 0.00000000e+00]\n",
            " [0.00000000e+00 2.56354946e-05 6.77503986e-05 ... 3.97796592e-03\n",
            "  2.01688041e-03 5.05305780e-05]\n",
            " [0.00000000e+00 9.08243283e-05 1.15114916e-04 ... 0.00000000e+00\n",
            "  9.47675360e-04 2.32244342e-04]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Define the function to predict interactions based on item similarity\n",
        "def item_based_predict(interactions, similarity, epsilon=1e-9):\n",
        "    \"\"\"\n",
        "    Predicts user-item interactions based on item-item similarity.\n",
        "    Parameters:\n",
        "        interactions (numpy array): The user-item interaction matrix.\n",
        "        similarity (numpy array): The item-item similarity matrix.\n",
        "        epsilon (float): Small constant added to the denominator to avoid division by zero.\n",
        "    Returns:\n",
        "        numpy array: The predicted interaction scores for each user-item pair.\n",
        "    \"\"\"\n",
        "    # np.dot does the matrix multiplication. Here we are calculating the\n",
        "    # weighted sum of interactions based on item similarity\n",
        "    pred = similarity.dot(interactions.T) / (similarity.sum(axis=1)[:, np.newaxis] + epsilon)\n",
        "    return pred.T  # Transpose to get users as rows and items as columns\n",
        "\n",
        "# Calculate the item-based predictions for positive interactions\n",
        "item_bert_prediction = item_based_predict(train_data_matrix, bert_sim)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_bert_prediction)\n",
        "print(item_bert_prediction.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#recommendation frame generation\n",
        "def create_recommendation_table(user_predictions, top_n=10, separator=\" \"):\n",
        "    \"\"\"\n",
        "    Creates a table of top-N recommendations for each user.\n",
        "\n",
        "    Args:\n",
        "        user_predictions (numpy.ndarray): Rows = users, columns = items. Predicted scores.\n",
        "        top_n (int): Number of top recommendations per user.\n",
        "        separator (str): Delimiter to join recommended book IDs.\n",
        "\n",
        "    Returns:\n",
        "        pandas.DataFrame: Columns = ['user_id', 'recommendation'].\n",
        "    \"\"\"\n",
        "    recommendations = []\n",
        "    num_users = user_predictions.shape[0]\n",
        "\n",
        "    for user_id in range(num_users):\n",
        "        top_items = np.argsort(user_predictions[user_id, :])[-top_n:][::-1]\n",
        "        recommendations.append({\n",
        "            'user_id': user_id,\n",
        "            'recommendation': separator.join(map(str, top_items))\n",
        "        })\n",
        "\n",
        "    return pd.DataFrame(recommendations)\n",
        "\n",
        "# Example usage with space-separated book_ids\n",
        "item_bert_recommendations_df = create_recommendation_table(item_bert_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "item_bert_recommendations_df.to_csv('item_bert_recommendations.csv', index=False)\n",
        "\n",
        "print(\"\\nItem-based Recommendations:\")\n",
        "display(item_bert_recommendations_df)"
      ],
      "metadata": {
        "outputId": "973a1c21-558a-460c-9688-60a91465f7ce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "jMGI3d66KMOf"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Item-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0  15060 2395 16 4512 13261 19 13048 11659 2096 1...\n",
              "1           1  8656 13478 10787 14409 11482 13477 8913 820 95...\n",
              "2           2  9154 14851 9097 3511 15226 5508 11444 11185 44...\n",
              "3           3  4471 10806 123 3837 5220 9701 3834 14997 2963 ...\n",
              "4           4  14274 467 14099 7698 4284 500 8567 7603 2415 1...\n",
              "...       ...                                                ...\n",
              "7833     7833  2750 6107 2121 14232 431 14142 14525 975 12105...\n",
              "7834     7834  7311 12753 12387 8241 10596 13952 14826 1675 8...\n",
              "7835     7835  7429 10297 11482 9442 1830 6911 1032 14898 130...\n",
              "7836     7836  5702 10308 11905 7399 101 2031 10651 14876 111...\n",
              "7837     7837  14636 15069 7309 3253 9474 14232 8067 696 1065...\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c93be70-8599-49eb-9b31-70d79f643af7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>15060 2395 16 4512 13261 19 13048 11659 2096 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>8656 13478 10787 14409 11482 13477 8913 820 95...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>9154 14851 9097 3511 15226 5508 11444 11185 44...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>4471 10806 123 3837 5220 9701 3834 14997 2963 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>14274 467 14099 7698 4284 500 8567 7603 2415 1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>2750 6107 2121 14232 431 14142 14525 975 12105...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>7311 12753 12387 8241 10596 13952 14826 1675 8...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>7429 10297 11482 9442 1830 6911 1032 14898 130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>5702 10308 11905 7399 101 2031 10651 14876 111...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>14636 15069 7309 3253 9474 14232 8067 696 1065...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c93be70-8599-49eb-9b31-70d79f643af7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4c93be70-8599-49eb-9b31-70d79f643af7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4c93be70-8599-49eb-9b31-70d79f643af7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4a13a931-3262-4bd0-b80a-5a98f9559cbd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a13a931-3262-4bd0-b80a-5a98f9559cbd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4a13a931-3262-4bd0-b80a-5a98f9559cbd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a16658b2-849e-4a31-99a0-fa02ea8e4305\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('item_tfidf_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a16658b2-849e-4a31-99a0-fa02ea8e4305 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('item_tfidf_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "item_tfidf_recommendations_df",
              "summary": "{\n  \"name\": \"item_tfidf_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7458,\n        \"samples\": [\n          \"3054 3935 10417 9730 1512 6469 2171 210 1254 6017\",\n          \"6125 4441 7717 14285 13403 9597 11260 11868 3306 9446\",\n          \"7823 13239 13495 7435 6045 9169 7680 13570 2562 9701\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Kr58GNrCeJf"
      },
      "source": [
        "#### CF Item-based\n",
        "\n",
        "### Step 2: Predict Positive Interactions Using Item Similarity\n",
        "\n",
        "Next, we’ll use the item similarity matrix to predict the likelihood of positive interactions for each user with each item.\n",
        "\n",
        "In what follows, we create a function that implements the above formula for item-to-item cf recommendation."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SUFiIfM-CeJf",
        "outputId": "c1deac25-e7f4-4178-85b1-fa518c716880"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix:\n",
            "[[4.07124617e-02 4.52133996e-02 4.22753279e-02 ... 1.40370420e-03\n",
            "  1.49607434e-03 1.45408917e-03]\n",
            " [4.99044636e-04 5.40259742e-04 7.30593435e-04 ... 6.43602321e-04\n",
            "  1.05987371e-03 5.76075461e-04]\n",
            " [5.08512449e-03 2.38535468e-03 2.76667655e-03 ... 7.86280352e-03\n",
            "  1.07486318e-02 2.67925446e-03]\n",
            " ...\n",
            " [1.30076838e-04 1.24691119e-04 1.18998938e-04 ... 7.70980718e-04\n",
            "  5.69537141e-04 1.11232614e-04]\n",
            " [8.13920691e-05 7.69201007e-05 9.44838386e-05 ... 5.87747053e-04\n",
            "  4.93571137e-04 8.70483393e-05]\n",
            " [1.29684333e-04 1.82379404e-04 1.52500398e-04 ... 1.77607404e-04\n",
            "  3.42767643e-04 2.02089351e-04]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Define the function to predict interactions based on item similarity\n",
        "def item_based_predict(interactions, similarity, epsilon=1e-9):\n",
        "    \"\"\"\n",
        "    Predicts user-item interactions based on item-item similarity.\n",
        "    Parameters:\n",
        "        interactions (numpy array): The user-item interaction matrix.\n",
        "        similarity (numpy array): The item-item similarity matrix.\n",
        "        epsilon (float): Small constant added to the denominator to avoid division by zero.\n",
        "    Returns:\n",
        "        numpy array: The predicted interaction scores for each user-item pair.\n",
        "    \"\"\"\n",
        "    # np.dot does the matrix multiplication. Here we are calculating the\n",
        "    # weighted sum of interactions based on item similarity\n",
        "    pred = similarity.dot(interactions.T) / (similarity.sum(axis=1)[:, np.newaxis] + epsilon)\n",
        "    return pred.T  # Transpose to get users as rows and items as columns\n",
        "\n",
        "# Calculate the item-based predictions for positive interactions\n",
        "item_prediction = item_based_predict(train_data_matrix, item_similarity)\n",
        "print(\"Predicted Interaction Matrix:\")\n",
        "print(item_prediction)\n",
        "print(item_prediction.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "gPB_HiqiCeJf",
        "outputId": "465fdf0c-79f6-4a02-c5b6-aaf3d50ad40b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Function to visualize the predicted interaction matrix for a subset of users and items\n",
        "def plot_interaction_prediction_heatmap(prediction_matrix, title, num_users=50, num_items=50):\n",
        "    \"\"\"\n",
        "    Plots a heatmap of a subset of the user-item predicted interaction matrix.\n",
        "    Parameters:\n",
        "        prediction_matrix: The predicted interaction matrix.\n",
        "        title: The title of the plot.\n",
        "        num_users: The number of users to display (rows).\n",
        "        num_items: The number of items to display (columns).\n",
        "    \"\"\"\n",
        "    # Extract a subset of the matrix for visualization\n",
        "    matrix_subset = prediction_matrix[:num_users, :num_items]\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(matrix_subset, cmap=\"YlGnBu\", cbar=True, cbar_kws={'label': 'Predicted Interaction Score'})\n",
        "    plt.xlabel('Item ID')\n",
        "    plt.ylabel('User ID')\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Visualize a subset of the predicted interaction matrix\n",
        "plot_interaction_prediction_heatmap(item_prediction, 'User-Item Predicted Interaction Matrix')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gtQSEyVECeJf"
      },
      "source": [
        "\n",
        "In this setup:\n",
        "- The `item_based_predict` function calculates a score for each user-item pair using the item-to-item colaborative filtering formula.\n",
        "- The result is a prediction matrix where each cell indicates the predicted likelihood of an interaction between each user and item."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wogtvY8ECeJf"
      },
      "source": [
        "## Task 4: User-to-User Collaborative Filtering with Implicit Feedback\n",
        "\n",
        "In this task, we’ll create a recommender system using **User-to-User Collaborative Filtering**. This approach translates to “Users who are similar to you also liked…”. We’ll predict the likelihood of a user interacting with an item based on the behavior of similar users."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yzCwi1hYCeJl"
      },
      "source": [
        "\n",
        "#### Step 1: Compute User Similarity Matrix\n",
        "\n",
        "To start, we’ll compute the similarity matrix between users using **cosine similarity**. This matrix shows how similar each user is to every other user based on their interaction patterns. This will create a `num_users * num_users` matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ESZMztZTCeJl",
        "outputId": "357ba9e6-ca3a-4f0d-92c0-390a0e9741cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "User-User Similarity Matrix:\n",
            "[[1.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         1.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         1.         ... 0.         0.         0.08084521]\n",
            " ...\n",
            " [0.         0.         0.         ... 1.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         1.         0.        ]\n",
            " [0.         0.         0.08084521 ... 0.         0.         1.        ]]\n",
            "Shape of User Similarity Matrix: (7838, 7838)\n"
          ]
        }
      ],
      "source": [
        "# Compute the user-user similarity matrix\n",
        "user_similarity = cosine_similarity(train_data_matrix)\n",
        "print(\"User-User Similarity Matrix:\")\n",
        "print(user_similarity)\n",
        "\n",
        "# Check the shape as a sanity check\n",
        "print(\"Shape of User Similarity Matrix:\", user_similarity.shape)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "Nliw5yY9CeJl",
        "outputId": "a81b8e4d-9a51-427f-b128-6b659d7f2722"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Function to plot the user similarity matrix\n",
        "def plot_user_similarity_heatmap(similarity_matrix, title, num_users=50):\n",
        "    \"\"\"\n",
        "    Plots a heatmap of a subset of the user similarity matrix.\n",
        "    Parameters:\n",
        "        similarity_matrix: The user-user similarity matrix.\n",
        "        title: The title of the plot.\n",
        "        num_users: The number of users to display (both rows and columns).\n",
        "    \"\"\"\n",
        "    # Extract a subset of the matrix for visualization\n",
        "    matrix_subset = similarity_matrix[:num_users, :num_users]\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(matrix_subset, cmap=\"coolwarm\", cbar=True, cbar_kws={'label': 'Similarity Score'})\n",
        "    plt.xlabel('User ID')\n",
        "    plt.ylabel('User ID')\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Visualize a subset of the user similarity matrix\n",
        "plot_user_similarity_heatmap(user_similarity, 'User-User Similarity Matrix')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b8ZUmYVQCeJl"
      },
      "source": [
        "### Step 2: Predict Positive Interactions Using User Similarity\n",
        "\n",
        "Next, we’ll use the user similarity matrix to predict the likelihood of positive interactions for each user with each item. Since we’re working with implicit feedback, we’ll calculate a score for each item based on binary interaction values (1 for positive interactions, 0 for none).\n",
        "\n",
        "The prediction formula is as follows:\n",
        "\n",
        "\\begin{equation}\n",
        "{p}_{u}(i) = \\frac{\\sum\\limits_{u' \\in U} \\text{sim}(u, u') \\cdot {R}_{u'}(i)}{\\sum\\limits_{u' \\in U} \\text{sim}(u, u')}\n",
        "\\end{equation}\n",
        "\n",
        "\n",
        "#### Explanation:\n",
        "*   $P_u(i)$ is the likelihood of user $u$ interacting with item $i$. This is the value we want to compute.\n",
        "*   $\\text{sim}(u, u')$ is the cosine similarity between users $u$ and $u'$.\n",
        "*   $R_u'(i)$ is one if user $u'$ has already interacted with item $i$. Otherwise it is zero.\n",
        "*   $U$ is the set of all users in the dataset.\n",
        "\n",
        "\n",
        "This formula calculates the likelihood of interaction between user $ u $ and item $ i $ based on interactions of similar users with that item. The weighted sum of interactions from similar users is normalized by the sum of the similarities."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mm1pJJAhCeJm"
      },
      "source": [
        "- **`similarity.dot(interactions)`**: Calculates the weighted sum of interactions for each user, based on similar users’ interactions.\n",
        "- **`np.abs(similarity).sum(axis=1)[:, np.newaxis]`**: The denominator normalizes the prediction by the sum of absolute similarities to avoid bias from users with more neighbors.\n",
        "- **`epsilon`**: Prevents division by zero, which could result in `NaN` values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E577LOFhCeJm",
        "outputId": "9939a884-801d-4dc0-86e4-cf307a25cfde"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Interaction Matrix (User-Based):\n",
            "[[0.12083887 0.12253831 0.12798326 ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.00421191 0.         0.         ... 0.         0.         0.        ]\n",
            " ...\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]\n",
            " [0.         0.         0.         ... 0.         0.         0.        ]]\n",
            "(7838, 15291)\n"
          ]
        }
      ],
      "source": [
        "# Define the function to predict interactions based on user similarity\n",
        "def user_based_predict(interactions, similarity, epsilon=1e-9):\n",
        "    \"\"\"\n",
        "    Predicts user-item interactions based on user-user similarity.\n",
        "    Parameters:\n",
        "        interactions (numpy array): The user-item interaction matrix.\n",
        "        similarity (numpy array): The user-user similarity matrix.\n",
        "        epsilon (float): Small constant added to the denominator to avoid division by zero.\n",
        "    Returns:\n",
        "        numpy array: The predicted interaction scores for each user-item pair.\n",
        "    \"\"\"\n",
        "    # Calculate the weighted sum of interactions based on user similarity\n",
        "    pred = similarity.dot(interactions) / (np.abs(similarity).sum(axis=1)[:, np.newaxis] + epsilon)\n",
        "    return pred\n",
        "\n",
        "# Calculate the user-based predictions for positive interactions\n",
        "user_prediction = user_based_predict(train_data_matrix, user_similarity)\n",
        "print(\"Predicted Interaction Matrix (User-Based):\")\n",
        "print(user_prediction)\n",
        "print(user_prediction.shape)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "_VNGoRBiCeJm",
        "outputId": "6cd4a827-cdb6-4f5d-aff2-a0075eee1f77"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Function to visualize the predicted interaction matrix for a subset of users and items\n",
        "def plot_interaction_prediction_heatmap(prediction_matrix, title, num_users=50, num_items=50):\n",
        "    \"\"\"\n",
        "    Plots a heatmap of a subset of the user-item predicted interaction matrix.\n",
        "    Parameters:\n",
        "        prediction_matrix: The predicted interaction matrix.\n",
        "        title: The title of the plot.\n",
        "        num_users: The number of users to display (rows).\n",
        "        num_items: The number of items to display (columns).\n",
        "    \"\"\"\n",
        "    # Extract a subset of the matrix for visualization\n",
        "    matrix_subset = prediction_matrix[:num_users, :num_items]\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.heatmap(matrix_subset, cmap=\"YlGnBu\", cbar=True, cbar_kws={'label': 'Predicted Interaction Score'})\n",
        "    plt.xlabel('Item ID')\n",
        "    plt.ylabel('User ID')\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Visualize a subset of the predicted interaction matrix\n",
        "plot_interaction_prediction_heatmap(user_prediction, 'User-Item Predicted Interaction Matrix (User-Based)')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LxtVflCUCeJn"
      },
      "source": [
        "## Task 5: Evaluating Our Recommenders"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iKOIA-MKCeJo"
      },
      "source": [
        "#### Ranking Accurarcy (Precision@K and Recall@K)\n",
        "\n",
        "An implicit recommendation system is a ranking system which ranks items for each user based on their relevance to the user. Therefore, to evaluate such system, we’re interested in the quality of the top ranked recommendations rather than the actual predicted score for each recommendation. **Precision@K** and **Recall@K** focus on the top-K items recommended for each user, measuring relevance of the top-ranked recommended items to a user.\n",
        "\n",
        "- **Precision@K**: Measures the proportion of relevant items in the top-K recommendations.\n",
        "  \n",
        "  \\begin{equation}\n",
        "  \\text{Precision@K} = \\frac{\\text{Number of relevant items in top-K}}{K}\n",
        "  \\end{equation}\n",
        "\n",
        "- **Recall@K**: Measures the proportion of actual relevant items that appear in the top-K recommendations.\n",
        "\n",
        "  \\begin{equation}\n",
        "  \\text{Recall@K} = \\frac{\\text{Number of relevant items in top-K}}{\\text{Total number of relevant items}}\n",
        "  \\end{equation}\n",
        "\n",
        "Recall@k and Precision@k are metrics that are computed per user. To have a single value to evaluate a recommender system as a whole, we can take the average of Recall@K and Precision@K among all of the users."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UzPzKqEIhO4x"
      },
      "source": [
        "### Your Turn !\n",
        "\n",
        "As an exercise, complete the function precision_recall_at_k below to calculate Precision@K and Recall@K for a given value of K. Follow the instructions provided in the function to fill in the missing parts."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "7f096JBcCeJo"
      },
      "outputs": [],
      "source": [
        "# Implement the precision_recall_at_k function\n",
        "def precision_recall_at_k(prediction, ground_truth, k=10):\n",
        "    \"\"\"\n",
        "    Calculates Precision@K and Recall@K for top-K recommendations.\n",
        "    Parameters:\n",
        "        prediction (numpy array): The predicted interaction matrix with scores.\n",
        "        ground_truth (numpy array): The ground truth interaction matrix (binary).\n",
        "        k (int): Number of top recommendations to consider.\n",
        "    Returns:\n",
        "        precision_at_k (float): The average precision@K over all users.\n",
        "        recall_at_k (float): The average recall@K over all users.\n",
        "    \"\"\"\n",
        "    num_users = prediction.shape[0]\n",
        "    precision_at_k, recall_at_k = 0, 0\n",
        "\n",
        "    for user in range(num_users):\n",
        "        # TODO: Get the indices of the top-K items for the user based on predicted scores\n",
        "        top_k_items = np.argsort(prediction[user, :])[-k:]\n",
        "\n",
        "        # TODO: Calculate the number of relevant items in the top-K items for the user\n",
        "        relevant_items_in_top_k = np.isin(top_k_items, np.where(ground_truth[user, :] == 1)[0]).sum()\n",
        "\n",
        "        # TODO: Calculate the total number of relevant items for the user\n",
        "        total_relevant_items = ground_truth[user, :].sum()\n",
        "\n",
        "        # Precision@K and Recall@K for this user\n",
        "        precision_at_k += relevant_items_in_top_k / k\n",
        "        recall_at_k += relevant_items_in_top_k / total_relevant_items if total_relevant_items > 0 else 0\n",
        "\n",
        "    # Average Precision@K and Recall@K over all users\n",
        "    precision_at_k /= num_users\n",
        "    recall_at_k /= num_users\n",
        "\n",
        "    return precision_at_k, recall_at_k\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DxFMp_tchO4x"
      },
      "source": [
        "After completing the function, you can calculate Precision@K and Recall@K for the user-based and item-based predictions as follows:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W7i8xI3khO4y",
        "outputId": "b5afbec0-1f61-4ac8-fc35-671be15867a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Item-based CF Precision@K: 0.5463383516203303\n",
            "Item-based CF Recall@K: 0.9127654762282359\n"
          ]
        }
      ],
      "source": [
        "# Run this line after implementing the function\n",
        "#precision_user_k, recall_user_k = precision_recall_at_k(user_prediction, test_data_matrix, k=10)\n",
        "precision_item_k, recall_item_k = precision_recall_at_k(item_prediction, test_data_matrix, k=10)\n",
        "\n",
        "#print('User-based CF Precision@K:', precision_user_k)\n",
        "#print('User-based CF Recall@K:', recall_user_k)\n",
        "print('Item-based CF Precision@K:', precision_item_k)\n",
        "print('Item-based CF Recall@K:', recall_item_k)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nRhr1MC7a2yO"
      },
      "source": [
        "## Task 6: Show the Recommendations for a Specific User\n",
        "\n",
        "Pick a user at random. Extract the top-10 recommendations for this user by both the User-to-User and Item-to-Item Collaborative Filtering models. Present the recommendations by showing the movie posters.\n",
        "\n",
        "__Hint:__ You can get the movie posters from the TMDb API. In the `links` DataFrame, you’ll find the TMDb ID corresponding to each movie. Using this ID, retrieve the movie poster and display it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "US_DyZM-hO4y"
      },
      "source": [
        "### Step 6.1: Get Recommendations"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def create_recommendation_table(user_predictions, top_n=10, separator=\" \"):\n",
        "    \"\"\"\n",
        "    Creates a table of top-N recommendations for each user.\n",
        "\n",
        "    Args:\n",
        "        user_predictions (numpy.ndarray): Rows = users, columns = items. Predicted scores.\n",
        "        top_n (int): Number of top recommendations per user.\n",
        "        separator (str): Delimiter to join recommended book IDs.\n",
        "\n",
        "    Returns:\n",
        "        pandas.DataFrame: Columns = ['user_id', 'recommendation'].\n",
        "    \"\"\"\n",
        "    recommendations = []\n",
        "    num_users = user_predictions.shape[0]\n",
        "\n",
        "    for user_id in range(num_users):\n",
        "        top_items = np.argsort(user_predictions[user_id, :])[-top_n:][::-1]\n",
        "        recommendations.append({\n",
        "            'user_id': user_id,\n",
        "            'recommendation': separator.join(map(str, top_items))\n",
        "        })\n",
        "\n",
        "    return pd.DataFrame(recommendations)\n",
        "\n",
        "# Example usage with space-separated book_ids\n",
        "#user_recommendations_df = create_recommendation_table(user_prediction, top_n=10, separator=\" \")\n",
        "item_recommendations_df = create_recommendation_table(item_prediction, top_n=10, separator=\" \")\n",
        "\n",
        "# Save and display\n",
        "#user_recommendations_df.to_csv('user_recommendations.csv', index=False)\n",
        "item_recommendations_df.to_csv('item_recommendations.csv', index=False)\n",
        "\n",
        "print(\"User-based Recommendations:\")\n",
        "#display(user_recommendations_df)\n",
        "\n",
        "print(\"\\nItem-based Recommendations:\")\n",
        "display(item_recommendations_df)"
      ],
      "metadata": {
        "id": "aBb3xg6S_hc_",
        "outputId": "64474baa-8cf2-403b-dca7-4b73604c3f16",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "User-based Recommendations:\n",
            "\n",
            "Item-based Recommendations:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      user_id                                     recommendation\n",
              "0           0                          24 21 1 20 2 17 0 7 14 11\n",
              "1           1                      31 35 33 29 32 36 39 38 30 34\n",
              "2           2                      80 94 92 76 59 52 60 54 78 44\n",
              "3           3            132 140 157 145 116 123 155 168 162 134\n",
              "4           4            192 202 204 194 205 200 191 196 197 203\n",
              "...       ...                                                ...\n",
              "7833     7833  7322 7760 975 12575 7306 5121 7312 7311 10460 187\n",
              "7834     7834  15276 13891 7128 1367 13952 15226 13890 10651 ...\n",
              "7835     7835  3055 4820 6791 6317 9719 4061 14875 7116 4815 ...\n",
              "7836     7836  14550 3471 15065 15184 14619 14618 14081 11820...\n",
              "7837     7837  2209 2191 88 12054 2243 5642 2198 14636 3377 1...\n",
              "\n",
              "[7838 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad7d9f64-c1b6-4935-98e9-df5cd32c65d6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>24 21 1 20 2 17 0 7 14 11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>31 35 33 29 32 36 39 38 30 34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>80 94 92 76 59 52 60 54 78 44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>132 140 157 145 116 123 155 168 162 134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>192 202 204 194 205 200 191 196 197 203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7833</th>\n",
              "      <td>7833</td>\n",
              "      <td>7322 7760 975 12575 7306 5121 7312 7311 10460 187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7834</th>\n",
              "      <td>7834</td>\n",
              "      <td>15276 13891 7128 1367 13952 15226 13890 10651 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7835</th>\n",
              "      <td>7835</td>\n",
              "      <td>3055 4820 6791 6317 9719 4061 14875 7116 4815 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7836</th>\n",
              "      <td>7836</td>\n",
              "      <td>14550 3471 15065 15184 14619 14618 14081 11820...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7837</th>\n",
              "      <td>7837</td>\n",
              "      <td>2209 2191 88 12054 2243 5642 2198 14636 3377 1...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7838 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad7d9f64-c1b6-4935-98e9-df5cd32c65d6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ad7d9f64-c1b6-4935-98e9-df5cd32c65d6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ad7d9f64-c1b6-4935-98e9-df5cd32c65d6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-87f60d87-8962-43da-8f32-611118bc9594\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87f60d87-8962-43da-8f32-611118bc9594')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-87f60d87-8962-43da-8f32-611118bc9594 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_bb21cb0c-6eda-42d7-9c8a-fe2351527eaf\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('item_recommendations_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bb21cb0c-6eda-42d7-9c8a-fe2351527eaf button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('item_recommendations_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "item_recommendations_df",
              "summary": "{\n  \"name\": \"item_recommendations_df\",\n  \"rows\": 7838,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2262,\n        \"min\": 0,\n        \"max\": 7837,\n        \"num_unique_values\": 7838,\n        \"samples\": [\n          2226,\n          2177,\n          4236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recommendation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7668,\n        \"samples\": [\n          \"11801 5662 11797 11802 11799 9747 9748 11800 3845 3843\",\n          \"10747 11224 11225 7056 11347 2379 4145 11625 11816 12242\",\n          \"7691 12873 10049 10725 7049 3796 2397 3613 7169 363\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FNhtZnnOhO4z"
      },
      "source": [
        "### Step 6.2: Create Recommendation DataFrames\n",
        "\n",
        "Merge the recommendations with the `item` and DataFrames to create two DataFrames (`user_recommendations_df` and `item_recommendations_df`) with columns `book_id`, `title`\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "j5zJuIVXhO4z",
        "outputId": "b0a2166d-37cf-44a2-ee97-565aaa29456b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'user_top_10' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-537f57af72d2>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Convert user_top_10 and item_top_10 arrays into DataFrames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0muser_top_10_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'book_id'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0muser_top_10\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mitem_top_10_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'book_id'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mitem_top_10\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Merge with items_df to add the title column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'user_top_10' is not defined"
          ]
        }
      ],
      "source": [
        "# Convert user_top_10 and item_top_10 arrays into DataFrames\n",
        "user_top_10_df = pd.DataFrame({'book_id': user_top_10})\n",
        "item_top_10_df = pd.DataFrame({'book_id': item_top_10})\n",
        "\n",
        "# Merge with items_df to add the title column\n",
        "user_recommendations_df = user_top_10_df.merge(items[['book_id', 'Title']], left_on='book_id', right_on='book_id')\n",
        "item_recommendations_df = item_top_10_df.merge(items[['book_id', 'Title']], left_on='book_id', right_on='book_id')\n",
        "\n",
        "# Select only the columns we want to display\n",
        "user_recommendations_df = user_recommendations_df[['book_id', 'Title']]\n",
        "item_recommendations_df = item_recommendations_df[['book_id', 'Title']]\n",
        "\n",
        "# Display the results\n",
        "display(user_recommendations_df)\n",
        "display(item_recommendations_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GP_tmmhBhO4z"
      },
      "source": [
        "### Fetching and Displaying Movie Posters\n",
        "\n",
        "The following code uses the **TMDb API** to fetch movie posters based on the `tmdbId` of each recommended movie. The `fetch_poster` function retrieves the movie poster URL, and the `show_recommendations` function displays the posters for the top-10 recommendations.\n",
        "\n",
        "You’ll use these functions in the next step to display the movie recommendations for a specific user."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NKQo_nIFhO40"
      },
      "outputs": [],
      "source": [
        "%pip install tmdbv3api"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lU7GidcAhO40"
      },
      "outputs": [],
      "source": [
        "from tmdbv3api import TMDb, Movie\n",
        "import pandas as pd\n",
        "\n",
        "# Set up the TMDb API with your API key\n",
        "tmdb = TMDb()\n",
        "tmdb.api_key = '37117cc09d5e00673f14f1cb7c7468b2'  # Replace with your actual TMDb API key\n",
        "\n",
        "movie_api = Movie()\n",
        "\n",
        "# Function to fetch movie posters\n",
        "def fetch_poster(tmdb_id):\n",
        "    try:\n",
        "        details = movie_api.details(tmdb_id)\n",
        "        poster_path = details.poster_path\n",
        "        return f\"https://image.tmdb.org/t/p/w200{poster_path}\" if poster_path else None\n",
        "    except:\n",
        "        return None"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Udpk6xxThO40"
      },
      "source": [
        "#### Displaying Movie Posters for Top-10 Recommendations\n",
        "\n",
        "In this step, you’ll complete the `show_recommendations` function to display the movie posters for the top-10 recommendations for a specific user, using the `tmdbId` from the `links` DataFrame.\n",
        "\n",
        "1. **Fetch the `tmdbId`** for each movie in the recommendations:\n",
        "   - Use the `links` DataFrame to retrieve the `tmdbId` for each recommended `movie_id`.\n",
        "   - This `tmdbId` is then used to fetch the poster image via the TMDb API.\n",
        "\n",
        "2. **Fetch and Display the Poster Image**:\n",
        "   - Use the `fetch_poster` function (already defined) to get the poster URL based on the `tmdbId`.\n",
        "   - If the poster URL is available, retrieve the image using the `requests` library and display it in the subplot.\n",
        "   - If no poster is available, show a \"No Image\" placeholder text.\n",
        "\n",
        "Here’s the code with placeholders where you need to complete each step:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6mfxE5C3hO40"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import requests\n",
        "from PIL import Image\n",
        "from io import BytesIO\n",
        "\n",
        "def show_recommendations(recommendations, model_name):\n",
        "    \"\"\"\n",
        "    Displays the movie posters for the top-10 recommended movies.\n",
        "\n",
        "    Parameters:\n",
        "    - recommendations: List or array of recommended movie IDs.\n",
        "    - model_name: Name of the recommendation model (e.g., \"User-to-User CF\" or \"Item-to-Item CF\").\n",
        "    \"\"\"\n",
        "    fig, axes = plt.subplots(1, len(recommendations), figsize=(20, 5))\n",
        "    fig.suptitle(f\"Top-10 Recommendations for User {user_id} - {model_name}\", fontsize=16)\n",
        "\n",
        "    for i, movie_id in enumerate(recommendations):\n",
        "        # Step 1: Fetch the `tmdbId` for the movie from the `links` DataFrame\n",
        "        # - Use `movie_id` to locate the corresponding `tmdbId`\n",
        "        # - Ensure `tmdb_id` is extracted as an integer\n",
        "        tmdb_id = links.loc[links['movie_id'] == movie_id, 'tmdbId'].values\n",
        "        if len(tmdb_id) == 0:\n",
        "            axes[i].axis('off')\n",
        "            continue\n",
        "\n",
        "        # Step 2: Fetch the poster URL using the `fetch_poster` function\n",
        "        # - Pass `tmdb_id[0]` to `fetch_poster` and store the result in `poster_url`\n",
        "        poster_url = fetch_poster(int(tmdb_id[0]))\n",
        "\n",
        "        # Step 3: Display the poster image if available\n",
        "        # - If `poster_url` is valid, use `requests` to get the image and display it\n",
        "        # - If `poster_url` is None, display \"No Image\" text in the placeholder\n",
        "        if poster_url:\n",
        "            response = requests.get(poster_url)\n",
        "            img = Image.open(BytesIO(response.content))\n",
        "            axes[i].imshow(img)\n",
        "            axes[i].axis('off')\n",
        "        else:\n",
        "            axes[i].text(0.5, 0.5, \"No Image\", ha='center', va='center')\n",
        "            axes[i].axis('off')\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "# Example usage after completing the TODOs:\n",
        "# Display top-10 recommendations for User-to-User CF\n",
        "show_recommendations(user_top_10, \"User-to-User CF\")\n",
        "\n",
        "# Display top-10 recommendations for Item-to-Item CF\n",
        "show_recommendations(item_top_10, \"Item-to-Item CF\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Hybrid models"
      ],
      "metadata": {
        "id": "VGDX_Xu_NoRH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### step 1.1: Combine CF + BERT\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "D_x7vIH9OA5R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 1.2: Combine CF + TF-IDF\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "SpCoPYpvNnOO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 1.3: Combine CF + Google API\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "HlhWVXBfOPTW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 2.1: Combine TF-IDF + BERT\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "40_fjJyyNw-k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 2.2 : Combine TF-IDF + GOOGLE API\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "Zagk2bWDN2IM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### step 2: Combine BERT + GOOGLE API\n",
        "content_sim = 0.5 * tfidf_sim + 0.5 * embed_sim"
      ],
      "metadata": {
        "id": "PRhaTR9AN5Pn"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "colab": {
      "provenance": [],
      "gpuType": "V28",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    },
    "accelerator": "TPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "80582eaecdd84ac493b192281eb09683": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_690c5708bc254687b9035e69f51c7674",
              "IPY_MODEL_72fa8f739b2f4625bf4d59a15eafb09d",
              "IPY_MODEL_1d570ae3f8c3407291df6882c4876413"
            ],
            "layout": "IPY_MODEL_d914f5d287ac447ea97c08c0c60702a6"
          }
        },
        "690c5708bc254687b9035e69f51c7674": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_647a4e383a0f4103870822b9cc7dc727",
            "placeholder": "​",
            "style": "IPY_MODEL_1226d72182db43839a1e1bb07aeecf8f",
            "value": "modules.json: 100%"
          }
        },
        "72fa8f739b2f4625bf4d59a15eafb09d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_27a171adc0e2446c824369971de1b0c4",
            "max": 349,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c3972c5bfa7a46f48482725c37a8bcc1",
            "value": 349
          }
        },
        "1d570ae3f8c3407291df6882c4876413": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_38e3db90025f4816947bfcacd5892a72",
            "placeholder": "​",
            "style": "IPY_MODEL_a8534146fc3244c7a4bd01182afa5544",
            "value": " 349/349 [00:00&lt;00:00, 46.2kB/s]"
          }
        },
        "d914f5d287ac447ea97c08c0c60702a6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "647a4e383a0f4103870822b9cc7dc727": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1226d72182db43839a1e1bb07aeecf8f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "27a171adc0e2446c824369971de1b0c4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c3972c5bfa7a46f48482725c37a8bcc1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "38e3db90025f4816947bfcacd5892a72": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8534146fc3244c7a4bd01182afa5544": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9a8dfe62308b4c25b951248661b1f9db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a0fff45d96d04e018302875a16d47cc3",
              "IPY_MODEL_a267eb4fa3c143fc978a7f1e57f3d7c5",
              "IPY_MODEL_110b9bffed884df19b50a74711b98ea4"
            ],
            "layout": "IPY_MODEL_4cd07dbf90744d6ebe496ffc6a660f90"
          }
        },
        "a0fff45d96d04e018302875a16d47cc3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bfcd3a0f9ca941a298c8e56faa1b3d24",
            "placeholder": "​",
            "style": "IPY_MODEL_45daf5efa99841cda496f2edeb8a5222",
            "value": "config_sentence_transformers.json: 100%"
          }
        },
        "a267eb4fa3c143fc978a7f1e57f3d7c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5e78bd51156a4ad08f5299d9f4422786",
            "max": 116,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c5f7c9af29a54074af31c3cacd778f7b",
            "value": 116
          }
        },
        "110b9bffed884df19b50a74711b98ea4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_54ff39c4371c4f7e8934e1860dd7cf48",
            "placeholder": "​",
            "style": "IPY_MODEL_c7e8065508e0491fba7fffa313fdfd36",
            "value": " 116/116 [00:00&lt;00:00, 17.9kB/s]"
          }
        },
        "4cd07dbf90744d6ebe496ffc6a660f90": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bfcd3a0f9ca941a298c8e56faa1b3d24": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "45daf5efa99841cda496f2edeb8a5222": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5e78bd51156a4ad08f5299d9f4422786": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c5f7c9af29a54074af31c3cacd778f7b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "54ff39c4371c4f7e8934e1860dd7cf48": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c7e8065508e0491fba7fffa313fdfd36": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d9e8c12c6f1e4800840af3e487f145f2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_77b94f09020f44ba97a217c79e962987",
              "IPY_MODEL_e3fcb48b87294d9b9c825eb24fbd5be8",
              "IPY_MODEL_ed34967d6cf54298b12f0a9edbd68588"
            ],
            "layout": "IPY_MODEL_6bda7911377b4e5aa25fa70d99c0b513"
          }
        },
        "77b94f09020f44ba97a217c79e962987": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_74b1deda12134d4499f14111545863af",
            "placeholder": "​",
            "style": "IPY_MODEL_0b9b7802f2014949b1b1dd96a3a8b663",
            "value": "README.md: 100%"
          }
        },
        "e3fcb48b87294d9b9c825eb24fbd5be8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_37056e355c844fa7a4d3c7aa293025de",
            "max": 10454,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_26f0a288da514ca9861b098b841a8fc2",
            "value": 10454
          }
        },
        "ed34967d6cf54298b12f0a9edbd68588": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4663751ace844cd5903b670487877bfa",
            "placeholder": "​",
            "style": "IPY_MODEL_9793c649dbc14cfea84e0f7296508db1",
            "value": " 10.5k/10.5k [00:00&lt;00:00, 1.47MB/s]"
          }
        },
        "6bda7911377b4e5aa25fa70d99c0b513": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "74b1deda12134d4499f14111545863af": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0b9b7802f2014949b1b1dd96a3a8b663": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "37056e355c844fa7a4d3c7aa293025de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "26f0a288da514ca9861b098b841a8fc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4663751ace844cd5903b670487877bfa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9793c649dbc14cfea84e0f7296508db1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ae0faf00428c4f3b8efd0b2679edf87c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4d6fb6c2d33748919d78992cdb637ef8",
              "IPY_MODEL_868852d80f714179bb5b864da05d7ed0",
              "IPY_MODEL_37eb6d3eb84b46f1bed9389a5b90d137"
            ],
            "layout": "IPY_MODEL_416b20820d8b4ca7aa6e2b6808383aad"
          }
        },
        "4d6fb6c2d33748919d78992cdb637ef8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b6d7d468f4434a34808549c3a4a9da36",
            "placeholder": "​",
            "style": "IPY_MODEL_e6a6cd9c18884ef2b34dcde8a3c6da62",
            "value": "sentence_bert_config.json: 100%"
          }
        },
        "868852d80f714179bb5b864da05d7ed0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ebea1a5da6f4462fa40cff814113b985",
            "max": 53,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6f2ad0fc1d6546f29246e0392d24d8ae",
            "value": 53
          }
        },
        "37eb6d3eb84b46f1bed9389a5b90d137": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f567d1217df949baa4d529ceefea7cb9",
            "placeholder": "​",
            "style": "IPY_MODEL_6555efa59b3c4c93a1e7bc3210948326",
            "value": " 53.0/53.0 [00:00&lt;00:00, 8.06kB/s]"
          }
        },
        "416b20820d8b4ca7aa6e2b6808383aad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b6d7d468f4434a34808549c3a4a9da36": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e6a6cd9c18884ef2b34dcde8a3c6da62": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ebea1a5da6f4462fa40cff814113b985": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6f2ad0fc1d6546f29246e0392d24d8ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f567d1217df949baa4d529ceefea7cb9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6555efa59b3c4c93a1e7bc3210948326": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fc76293d0adf4fe1b18a05bd83704bdc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_288041a6224940c88fdf0867a97c8568",
              "IPY_MODEL_feebad18e2de4afbba1622df2b3828f7",
              "IPY_MODEL_95d6a94657324e20acd2da06392a7a47"
            ],
            "layout": "IPY_MODEL_f2bc1a1376df4666899bd108e7316baa"
          }
        },
        "288041a6224940c88fdf0867a97c8568": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3b4da162774b4229b0fe876d41041c98",
            "placeholder": "​",
            "style": "IPY_MODEL_f460d6f1d985473ca52d55b36f3e8d71",
            "value": "config.json: 100%"
          }
        },
        "feebad18e2de4afbba1622df2b3828f7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_afe75a88bb6f4fbebd2cc0de3f11c62a",
            "max": 612,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3ca3ff5669bf4043aff257ab459128f1",
            "value": 612
          }
        },
        "95d6a94657324e20acd2da06392a7a47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_408bcf3f10174f1abcc54ec310e08ca2",
            "placeholder": "​",
            "style": "IPY_MODEL_b5dccb80babc44fcb1f0f340059dded3",
            "value": " 612/612 [00:00&lt;00:00, 88.0kB/s]"
          }
        },
        "f2bc1a1376df4666899bd108e7316baa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3b4da162774b4229b0fe876d41041c98": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f460d6f1d985473ca52d55b36f3e8d71": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "afe75a88bb6f4fbebd2cc0de3f11c62a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3ca3ff5669bf4043aff257ab459128f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "408bcf3f10174f1abcc54ec310e08ca2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5dccb80babc44fcb1f0f340059dded3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8608d65011be4e4ba6fe6084f063e5e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8c2f74f7a8bd4ff283a888ba794a8d9e",
              "IPY_MODEL_4ed5d4d6cf5b40148902e49eb57d9a38",
              "IPY_MODEL_f671db28cb6a42dda64820bd951a1609"
            ],
            "layout": "IPY_MODEL_a5c7101972614e339808a1a309a492c8"
          }
        },
        "8c2f74f7a8bd4ff283a888ba794a8d9e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a0ed19655b594818b1deaa9ef86c7020",
            "placeholder": "​",
            "style": "IPY_MODEL_354481e71b564e70a4df48209d6a12dd",
            "value": "model.safetensors: 100%"
          }
        },
        "4ed5d4d6cf5b40148902e49eb57d9a38": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_28a84e3f94554460ad413a9b32cc2372",
            "max": 90868376,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_464016e901114d90bb889c064af8365f",
            "value": 90868376
          }
        },
        "f671db28cb6a42dda64820bd951a1609": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ec044ffdb4f641db8b9c3285dec8df8c",
            "placeholder": "​",
            "style": "IPY_MODEL_0b396e220b854d029d367b90d12ba347",
            "value": " 90.9M/90.9M [00:00&lt;00:00, 139MB/s]"
          }
        },
        "a5c7101972614e339808a1a309a492c8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a0ed19655b594818b1deaa9ef86c7020": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "354481e71b564e70a4df48209d6a12dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "28a84e3f94554460ad413a9b32cc2372": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "464016e901114d90bb889c064af8365f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ec044ffdb4f641db8b9c3285dec8df8c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0b396e220b854d029d367b90d12ba347": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "726db639e12b4307a490c72d617e0586": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6656997bf69840fca4c4bb81ccacceb1",
              "IPY_MODEL_4b46620334d242adb8a0a5178621c72c",
              "IPY_MODEL_624c59c88660421795e5789103822a6c"
            ],
            "layout": "IPY_MODEL_42560c93481347fbad1914c2d77aaf86"
          }
        },
        "6656997bf69840fca4c4bb81ccacceb1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4aa3f091d39547cc94234dac77738da6",
            "placeholder": "​",
            "style": "IPY_MODEL_160e0971318c4084b793aabffae8ee3d",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "4b46620334d242adb8a0a5178621c72c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6f44fe209d3f43a891ae84961846d354",
            "max": 350,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7b467665dfc84923a7e6ab4f0663a601",
            "value": 350
          }
        },
        "624c59c88660421795e5789103822a6c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9433aca448ea490387d150f20e6a0078",
            "placeholder": "​",
            "style": "IPY_MODEL_cac302847f0b4636944e1a932696d2d6",
            "value": " 350/350 [00:00&lt;00:00, 53.5kB/s]"
          }
        },
        "42560c93481347fbad1914c2d77aaf86": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4aa3f091d39547cc94234dac77738da6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "160e0971318c4084b793aabffae8ee3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6f44fe209d3f43a891ae84961846d354": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7b467665dfc84923a7e6ab4f0663a601": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9433aca448ea490387d150f20e6a0078": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cac302847f0b4636944e1a932696d2d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d9dbd0a850ba4cfbb927e0b68c22d391": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3294b148088e40308fcdbad3b0f7b66e",
              "IPY_MODEL_f2c336e8baa4489795d3ed3b9ef213c0",
              "IPY_MODEL_13a3faa8718e4907adb8bec8463b517e"
            ],
            "layout": "IPY_MODEL_c146f15a1c5c42e9996c11aa294de384"
          }
        },
        "3294b148088e40308fcdbad3b0f7b66e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d5e473b843a94b6a8d4899fde0980931",
            "placeholder": "​",
            "style": "IPY_MODEL_c30ed87f20d74af6b1dbfb082a7941de",
            "value": "vocab.txt: 100%"
          }
        },
        "f2c336e8baa4489795d3ed3b9ef213c0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d958415570ff49a6aa9a4a9d35a5e2ad",
            "max": 231508,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e13ed4b8b6964221a1b0029976fbf0f1",
            "value": 231508
          }
        },
        "13a3faa8718e4907adb8bec8463b517e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d34e425f26f4306892453d23df702d7",
            "placeholder": "​",
            "style": "IPY_MODEL_1901c1804cd649df866b85809bc40091",
            "value": " 232k/232k [00:00&lt;00:00, 5.08MB/s]"
          }
        },
        "c146f15a1c5c42e9996c11aa294de384": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d5e473b843a94b6a8d4899fde0980931": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c30ed87f20d74af6b1dbfb082a7941de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d958415570ff49a6aa9a4a9d35a5e2ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e13ed4b8b6964221a1b0029976fbf0f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9d34e425f26f4306892453d23df702d7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1901c1804cd649df866b85809bc40091": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7b82f59eae234b95ab22ce5d7ffbabe1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9a4fa0ea1f4d45969ac5b6231afaf5ac",
              "IPY_MODEL_290511ac52284812a326eca6a2a7b51a",
              "IPY_MODEL_bb37e92b8d4c470789da3d5341f7acbe"
            ],
            "layout": "IPY_MODEL_de3dbaf51fa24e7fab5abf8fc3f65d34"
          }
        },
        "9a4fa0ea1f4d45969ac5b6231afaf5ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_79dbbe73e605494091cab5f5efaab160",
            "placeholder": "​",
            "style": "IPY_MODEL_8259857e855e4e0ea1bfb3dafd2f2b8c",
            "value": "tokenizer.json: 100%"
          }
        },
        "290511ac52284812a326eca6a2a7b51a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5f11c3894b244385b8a854f48b44ca44",
            "max": 466247,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6ea0673f94564548be20c05ff37d9713",
            "value": 466247
          }
        },
        "bb37e92b8d4c470789da3d5341f7acbe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9aefeb1c378748be8763b396ffa11f35",
            "placeholder": "​",
            "style": "IPY_MODEL_55dad54059e849d5b9d84b19b214c6d4",
            "value": " 466k/466k [00:00&lt;00:00, 23.3MB/s]"
          }
        },
        "de3dbaf51fa24e7fab5abf8fc3f65d34": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "79dbbe73e605494091cab5f5efaab160": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8259857e855e4e0ea1bfb3dafd2f2b8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5f11c3894b244385b8a854f48b44ca44": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6ea0673f94564548be20c05ff37d9713": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9aefeb1c378748be8763b396ffa11f35": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "55dad54059e849d5b9d84b19b214c6d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "91fcff9119a54427bbf27cbbbd04fb49": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_74b487dea1c641d4960305b3713ee4af",
              "IPY_MODEL_ede29c588473419981f11918935be3ef",
              "IPY_MODEL_b79c2542635e40be8e36ca91067f5b8b"
            ],
            "layout": "IPY_MODEL_79543c36606e48b088e1cf524273c21a"
          }
        },
        "74b487dea1c641d4960305b3713ee4af": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2e0e26f1902843c4ad6caacf79987b42",
            "placeholder": "​",
            "style": "IPY_MODEL_ba7f9974513f4c418112c7b9670428ea",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "ede29c588473419981f11918935be3ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_479b341910994c2cbdc5cec011382c07",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_287b7f7dafc74f34bcc8be7b00fc18ae",
            "value": 112
          }
        },
        "b79c2542635e40be8e36ca91067f5b8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d99309a72b87447fa08a330686e0f027",
            "placeholder": "​",
            "style": "IPY_MODEL_ed609b7c36c44dcfa28f9230092209f2",
            "value": " 112/112 [00:00&lt;00:00, 15.2kB/s]"
          }
        },
        "79543c36606e48b088e1cf524273c21a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2e0e26f1902843c4ad6caacf79987b42": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ba7f9974513f4c418112c7b9670428ea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "479b341910994c2cbdc5cec011382c07": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "287b7f7dafc74f34bcc8be7b00fc18ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d99309a72b87447fa08a330686e0f027": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ed609b7c36c44dcfa28f9230092209f2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "31cf2d27e5b444ffa44e0b70381b9740": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_7ea89d6db93b4b1789ec480fbdafb784",
              "IPY_MODEL_ad1cf73f3c134996bd24b26310cbfbf3",
              "IPY_MODEL_f08ded6b9e004dc49f7e08f3ea697826"
            ],
            "layout": "IPY_MODEL_e51bed7e7cb649ec9379941a9b13ee18"
          }
        },
        "7ea89d6db93b4b1789ec480fbdafb784": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e39bbaa9fee74358a6f61c171f16d6ca",
            "placeholder": "​",
            "style": "IPY_MODEL_5901d035a55f441dbd64f93c488975a4",
            "value": "config.json: 100%"
          }
        },
        "ad1cf73f3c134996bd24b26310cbfbf3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_23b2238329f546578e7992e87213fe04",
            "max": 190,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f1464b347f9f421aabeb442ed15a9d74",
            "value": 190
          }
        },
        "f08ded6b9e004dc49f7e08f3ea697826": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c0da2728ff7346f0b67203f9d0c5af3b",
            "placeholder": "​",
            "style": "IPY_MODEL_03324403c9c641be83c77011e3293e4d",
            "value": " 190/190 [00:00&lt;00:00, 27.7kB/s]"
          }
        },
        "e51bed7e7cb649ec9379941a9b13ee18": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e39bbaa9fee74358a6f61c171f16d6ca": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5901d035a55f441dbd64f93c488975a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "23b2238329f546578e7992e87213fe04": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f1464b347f9f421aabeb442ed15a9d74": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c0da2728ff7346f0b67203f9d0c5af3b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "03324403c9c641be83c77011e3293e4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "37c515211ad74fffbdca82123ff751d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d08423288bbe45b6b2252164aab63035",
              "IPY_MODEL_a23b4ce24feb41e6ab011da8a9414d6d",
              "IPY_MODEL_6b911464e91d430a996cfc214948b26f"
            ],
            "layout": "IPY_MODEL_5d93c2811ad742a7aab55c1f2159106f"
          }
        },
        "d08423288bbe45b6b2252164aab63035": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_982c33ae80434faca827a64e8e7edce7",
            "placeholder": "​",
            "style": "IPY_MODEL_051b023408404213af1f502d3314cb56",
            "value": "Batches: 100%"
          }
        },
        "a23b4ce24feb41e6ab011da8a9414d6d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5a116f5960654fe7b2e42aa6f6ff696a",
            "max": 478,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8c39f73f070c4617b5a3d360675214c8",
            "value": 478
          }
        },
        "6b911464e91d430a996cfc214948b26f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_143688edd61b43e29a9e0c2ffc2fca4a",
            "placeholder": "​",
            "style": "IPY_MODEL_e9ba6fd2c271428bb6533d57e7205ddb",
            "value": " 478/478 [11:48&lt;00:00,  1.38it/s]"
          }
        },
        "5d93c2811ad742a7aab55c1f2159106f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "982c33ae80434faca827a64e8e7edce7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "051b023408404213af1f502d3314cb56": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5a116f5960654fe7b2e42aa6f6ff696a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8c39f73f070c4617b5a3d360675214c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "143688edd61b43e29a9e0c2ffc2fca4a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e9ba6fd2c271428bb6533d57e7205ddb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}